import datetime
from datetime import timedelta
from pprint import pprint
from typing import Union

from app.auth import TUser
from app.db.db_access import get_days_costs, check_comment, get_comment_task_path, remove_comment_db, \
    get_bookmarks_user, \
    remove_users_bookmark_db, get_projects_db, add_project_in_db, get_all_tasks_id_db, add_task_in_db, \
    get_tasks_from_db, get_task_name, get_project_id_by_task_id, remove_task_from_db, get_list_user_bookmark, \
    get_all_booked_task_id, add_bookmark_into_db, get_bookmark_id, add_bookmark_to_user, get_tasks_path, \
    add_comment_in_db, get_task_ws_id_db, change_selected_task
from app.api.ws_api import get_day_costs_from_ws, remove_cost_ws, get_all_project_for_user, search_tasks,\
    get_task_info, add_cost
from app.db.stat import current_month_stat, show_gist

INPUT_COSTS = """
–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –º–æ–∂–Ω–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ(–Ω–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏).
–í –Ω–∞—á–∞–ª–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, —Å–ª–µ–¥–æ–º —á–µ—Ä–µ–∑ '!' –º–æ–∂–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ –¥–≤—É—Ö —á–∞—Å–æ–≤. –ê–ª–≥–æ—Ä–∏—Ç–º —Å–∞–º —Ä–∞–∑–¥–µ–ª–∏—Ç –ø–æ –¥–≤–∞ —á–∞—Å–∞. –ü—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É '!' –Ω–µ –≤–∞–∂–Ω—ã

–î–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ '<i>–≤—ã–±—Ä–∞—Ç—å</i>'
–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ '<i>–æ—Ç–º–µ–Ω–∞</i>'
–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ '<i>–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª</i>'
–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –∑–∞–∫–ª–∞–¥–∫–∏ –≤–≤–µ–¥–∏—Ç–µ '<i>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É</i>'
–ü—Ä–∏–º–µ—Ä‚Ññ1:\n<i>3</i> ! <i>–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–ø—É—Å–∞</i> ! <i>–°–±–æ—Ä–∫–∞ –ø–µ—á–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞</i>
"""
# "\n\n"
# "–ü—Ä–∏–º–µ—Ä‚Ññ2:\n<i>0.5</i>! <i>–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–ø—É—Å–∞</i> \n"
# "<i>2.5</i>! <i>–°–±–æ—Ä–∫–∞ –ø–µ—á–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞</i>\n\n"
# "–í –ø–µ—Ä–≤–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤ –±–æ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á,"
# "–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –≤ WS —É–ª–µ—Ç–∏—Ç –¥–≤–µ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞.\n"
# "–í–æ –≤—Ç–æ—Ä–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤ WS —É–ª–µ—Ç–∏—Ç 3 –∑–∞–ø–∏—Å–∏:\n"
# "–ü–æ–ª—á–∞—Å–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é. –ê –ø–æ –≤—Ç–æ—Ä–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é 2,5 —á–∞—Å–∞ —Ä–∞–∑–¥–µ–ª—è—Ç—Å—è "
# "–Ω–∞ –¥–≤–µ –∑–∞–ø–∏—Å–∏: –Ω–∞ –∑–∞–ø–∏—Å—å —Å –¥–≤—É–º—è —á–∞—Å–∞–º–∏ –∏ –∑–∞–ø–∏—Å—å —Å –ø–æ–ª—É—á–∞—Å–æ–º."
# """


INPUT_COST_EXAMPLE = """
–î—Ä–æ–±–Ω—É—é –∏ —Ü–µ–ª—É—é —á–∞—Å—Ç—å —á–∞—Å–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å '.', ','
–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ':', —Ç–æ –±—É–¥–µ—Ç –≤–∑—è—Ç–æ —Ç–æ—á–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
–ü—Ä–∏–º–µ—Ä‚Ññ1:
<i>3</i> ! <i>–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–ø—É—Å–∞</i> ! <i>–°–±–æ—Ä–∫–∞ –ø–µ—á–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞</i>

–ü—Ä–∏–º–µ—Ä‚Ññ2:
<i>0.5</i>! <i>–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–ø—É—Å–∞</i>
<i>2.5</i>! <i>–°–±–æ—Ä–∫–∞ –ø–µ—á–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞</i>

–í –ø–µ—Ä–≤–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤ –±–æ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á, 
–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –≤ WS —É–ª–µ—Ç–∏—Ç –¥–≤–µ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞.

–í–æ –≤—Ç–æ—Ä–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤ WS —É–ª–µ—Ç–∏—Ç 3 –∑–∞–ø–∏—Å–∏:
–ü–æ–ª—á–∞—Å–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é. –ê –ø–æ –≤—Ç–æ—Ä–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é 2,5 —á–∞—Å–∞ —Ä–∞–∑–¥–µ–ª—è—Ç—Å—è –Ω–∞ –¥–≤–µ –∑–∞–ø–∏—Å–∏: 
–Ω–∞ –∑–∞–ø–∏—Å—å —Å –¥–≤—É–º—è —á–∞—Å–∞–º–∏ –∏ –∑–∞–ø–∏—Å—å —Å –ø–æ–ª—É—á–∞—Å–æ–º.
"""


def format_time(time: str) -> str:
    hours = int(time.split(':')[0].strip(' '))
    minutes = int(time.split(':')[1].strip(' '))
    f_hours: str = ''
    f_minutes: str = ''
    if minutes > 0:
        f_minutes = f'{minutes} –º–∏–Ω—É—Ç'
    if hours >= 0:
        if hours == 1:
            word = '—á–∞—Å'
        elif 2 <= hours <= 4:
            word = '—á–∞—Å–∞'
        elif hours == 0:
            return f_minutes
        else:
            word = '—á–∞—Å–æ–≤'
        f_hours = f'{hours} {word}'
    return ' '.join([f_hours, f_minutes])


def format_date(date: str) -> str:
    f_date = '—Å–µ–≥–æ–¥–Ω—è' if date == 'today' else date
    return f_date


def sum_time(times: list[str]) -> str:
    tot_time: timedelta = timedelta()
    for i in times:
        tot_time += timedelta(hours=int(i.split(':')[0]), minutes=int(i.split(':')[1]))
    return ':'.join(str(tot_time).split(':')[:2])


def text_count_removed_costs(user_id: int) -> str:
    user = TUser(user_id)
    count = len(get_days_costs(user))
    if 2 <= count <= 4:
        word = '–∑–∞–ø–∏—Å–∏'
    else:
        word = '–∑–∞–ø–∏—Å–µ–π'
    return f'–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {str(count)} {word}.'


def get_users_of_list(selected_list: str) -> list[list[str, str, int]]:
    all_users = TUser.get_users_list()
    selected_users = [u for u in all_users if u.status == selected_list]
    users: list[TUser] = []
    for i in selected_users:
        users.append(TUser(i.user_id))
    data_for_keyboard: list = []
    action = ''
    if selected_list == 'user':
        action: str = 'black_user'
    elif selected_list == 'black':
        action: str = 'known_user'
    for i in users:
        data_for_keyboard.append([i.full_name, action, i.user_id])
    return data_for_keyboard


def menu_buttons(user: TUser) -> list[list[str]]:
    if user.get_email() is None:
        buttons = [['–û–±–æ –º–Ω–µ', 'about me'],
                   ['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—á—Ç—É', 'set email']]
    else:
        buttons = [[f"üìÉ –û—Ç—á—ë—Ç –∑–∞ {format_date(user.get_date())}", 'daily report'],
                   ['üîç –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É', 'get tasks list'],
                   ['‚ùåüïì –£–¥–∞–ª–∏—Ç—å —Ç—Ä—É–¥–æ—á–∞—Å—ã', 'remove time cost'],
                   ['‚ùåüß∑ –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É', 'remove book'],
                   ['üîÑüìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', 'change date'],
                   ['üîÑüìß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É', 'change email'],
                   ['‚ÑπÔ∏è –û –≤–∞—Å', 'about me'],
                   ['üí¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–æ—Ç–∑—ã–≤', 'offers']]
    return buttons


def about_user(user: TUser) -> str:
    status = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.admin else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    date = format_date(user.get_date())
    answer = f"–í–∞—à–µ –∏–º—è - {user.full_name}\n" + \
             f"–í–∞—à–∞ –ø–æ—á—Ç–∞ - {user.get_email()}\n" + \
             f"–í–∞—à —Å—Ç–∞—Ç—É—Å - {status}\n" + \
             f"–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ - {date}"
    return answer


def see_days_costs(user: TUser) -> str:
    comments = get_days_costs(user)
    answer: str = ''
    if comments is None or len(comments) == 0:
        answer = f"–í—ã –Ω–µ –≤–Ω–µ—Å–ª–∏ —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç–∏ –∑–∞ {user.get_date()}.\n"\
                 '–ù–µ –Ω–∞–≤–ª–µ–∫–∞–π –Ω–∞ —Å–µ–±—è –≥–Ω–µ–≤ –ö—Å–µ–Ω–∏–∏. \n'\
                 '–ë—É–¥—å —É–º–Ω–∏—á–∫–æ–π - –≤–Ω–µ—Å–∏ —á–∞—Å—ã.'
    else:
        total_time: list[str] = []
        prev_proj_name, prev_task_name = comments[0][3], comments[0][2]
        now_proj = ' '.join(["–ü—Ä–æ–µ–∫—Ç:", prev_proj_name])
        now_task = ' '.join(["  –ó–∞–¥–∞—á–∞:", prev_task_name])
        now_row = ' '.join(["    –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:", format_time(comments[0][1]), "–Ω–∞", comments[0][0]])
        answer = "\n".join([now_proj, now_task, now_row])
        total_time.append(comments[0][1])
        for comment in comments[1:]:
            cur_proj_name, cur_task_name = comment[3], comment[2]
            cur_time, cur_text = comment[1], comment[0]
            if prev_proj_name == cur_proj_name:
                if prev_task_name == cur_task_name:
                    now_row = ' '.join(['    –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:', format_time(cur_time), '–Ω–∞', cur_text])
                    answer = '\n'.join([answer, now_row])
                else:
                    prev_task_name = cur_task_name
                    now_task = ' '.join(["  –ó–∞–¥–∞—á–∞:", cur_task_name])
                    now_row = ' '.join(['    –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:', format_time(cur_time), '–Ω–∞', cur_text])
                    answer = '\n'.join([answer, now_task, now_row])
            else:
                now_proj = ' '.join(["\n–ü—Ä–æ–µ–∫—Ç:", cur_proj_name])
                now_task = ' '.join(["  –ó–∞–¥–∞—á–∞:", cur_task_name])
                now_row = ' '.join(['    –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:', format_time(cur_time), '–Ω–∞', cur_text])
                answer = '\n'.join([answer, now_proj, now_task, now_row])
                prev_task_name = cur_task_name
                prev_proj_name = cur_proj_name
            total_time.append(cur_time)
        tot_row = f"\n–û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞ {format_date(user.get_date())}: {format_time(sum_time(total_time))}"
        answer = '\n'.join([answer, tot_row])
    return answer


def days_costs_for_remove(user: TUser) -> list[list[str, int, str]]:
    comments = get_days_costs(user)
    list_comments: list[list[str, int, str]] = []
    for comment in comments:
        name = ' '.join([format_time(comment[1]), comment[0], comment[2]])
        list_comment = [name, comment[4], 'remove_cost_ws']
        list_comments.append(list_comment)
    return list_comments


async def update_day_costs(user: TUser) -> None:
    for comment in await get_day_costs_from_ws(user.get_date()):
        check_comment(comment)


def remove_cost(cost_id: int) -> str:
    task_path: str = get_comment_task_path(cost_id)
    req = remove_cost_ws(task_path, cost_id)
    if req.get('status') == 'ok':  # TODO –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–æ–¥ –±—Ä–æ—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        remove_comment_db(cost_id)
        return '–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
    else:
        # TODO –ª–æ–≥ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É
        return '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ WorkSection'


def bookmarks_for_remove(user: TUser) -> list[list[str, int, str]]:
    bookmarks = get_bookmarks_user(user)
    list_bookmarks: list[list[str, int, str]] = []
    for bookmark in bookmarks:
        list_bookmarks.append([bookmark[1], bookmark[0], 'remove_bookmark'])
    return list_bookmarks


def remove_bookmark_from_user(id_ub: int) -> None:
    remove_users_bookmark_db(id_ub)


def remove_costs(user: TUser):
    comments = get_days_costs(user)
    id_comments = [i[-1] for i in comments]
    for i in id_comments:
        yield remove_cost(i)  # TODO —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–¥ —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —á–µ—Ä–µ–∑ —Å–∞–º WS


async def get_project_list(user: TUser) -> list[list[str, int, str]]:
    projects: list[list] = await get_all_project_for_user(user.get_email())
    for i in projects:
        if i[1] not in get_projects_db():
            await add_project_in_db(i)
        i.append('search_task')
    return projects


async def update_task_parent(parent_id: int) -> None:
    project_id = get_project_id_by_task_id(parent_id)
    project_tasks = search_tasks(f'/project/{project_id}/')
    all_db_task_id = get_all_tasks_id_db(project_id)
    all_ws_task_id: list = []
    for key, value in project_tasks.items():
        all_ws_task_id.append(key)
        if key not in all_db_task_id:
            page = f'/project/{project_id}/{key}/'
            task_info = get_task_info(page)
            add_task_in_db(task_info.get('data'))
        if value.get('child') is not None:
            for sub_key, sub_value in value.get('child').items():
                all_ws_task_id.append(sub_key)
                if sub_key not in all_db_task_id:
                    sub_page = f'/project/{project_id}/{key}/{sub_key}/'
                    subtask_info = get_task_info(sub_page)
                    add_task_in_db(subtask_info.get('data'), key)
    for i in all_db_task_id:
        if i not in all_ws_task_id:
            remove_task_from_db(i)
            # else:
            # print('sub already in base')
        # else:
            # print(value.get('name'))
            # print('already in base')
            # add_task_in_db()
        # if value is not None:
        #     set_parent_task(key, value)


def get_tasks(parent_id: str, user_id: int) -> Union[list[list], str]:
    child_tasks: list[list] = get_tasks_from_db(parent_id)
    if len(child_tasks) == 0:
        name = get_task_name(parent_id)
        date = f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ - {format_date(TUser(user_id).get_date())}'
        answer: str = '\n'.join([name, date, INPUT_COSTS])
        return answer
    for i in child_tasks:
        i.append('search_task')
    return child_tasks


def get_list_bookmark(user_id: int) -> Union[list[list], str]:
    user_list_bookmark = get_list_user_bookmark(user_id)
    if len(user_list_bookmark) == 0:
        return '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–ª–∞–¥–æ–∫.\n –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É"'
    for i in user_list_bookmark:
        i.append('add_costs')
    return user_list_bookmark  # TODO –¥–≤–µ –ø–æ–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–¥–∞—é—â–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏


def add_costs(message: str, data: dict) -> str:
    user = TUser(data.get('user_id'))
    date = user.get_date()
    email = user.get_email()
    path = get_tasks_path(data.get('id'))
    list_comments: list[list[str, timedelta]] = parse_input_comments(message)
    for comments_text, comments_time in list_comments:
        req = add_cost(page=path,
                       user_email=email,
                       comment=comments_text,
                       time=comments_time,
                       date=date)
        status = req.get('status')
        if status == 'ok':
            comment_id = req.get('id')
            add_comment_in_db(comment_id, user.user_id, data.get('id'), comments_time, comments_text, date)
            yield '–£—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–æ'
        else:
            yield '–ù–µ –≤–Ω–µ—Å–µ–Ω–æ'


def to_correct_time(time: str) -> datetime.timedelta:
    out_time: datetime.timedelta
    if ':' in time:
        out_time = timedelta(hours=int(time.split(':')[0]),
                             minutes=int(time.split(':')[1]))
    else:
        time = float(time.replace(',', '.') if ',' in time else time)
        out_time = timedelta(hours=time)
    return out_time


def time_to_comment(comments: list[str], time_d: datetime.timedelta):
    max_time_cost = timedelta(hours=2)
    for comment in comments:
        comment_time = time_d / len(comments)
        if comment_time > max_time_cost:
            split_comment_time = comment_time
            while split_comment_time > max_time_cost:
                split_comment_time -= max_time_cost
                yield [comment, max_time_cost]
            yield [comment, split_comment_time]
        else:
            yield [comment, comment_time]


def parse_input_comments(message: str) -> list[list[str, timedelta]]:
    list_rows: list = message.split('\n')
    comment_with_time: list[list[str, timedelta]] = list(list())
    for row in list_rows:
        comments = [i.strip(' ') for i in row.split('!')[1:]]
        if '' in comments:
            comments.remove('')
        time_d = to_correct_time(row.split('!')[0])
        for i in time_to_comment(comments, time_d):
            comment_with_time.append(i)
    for i in comment_with_time:
        i[1] = ':'.join(str(i[1]).split(':')[:2])
    return comment_with_time


def add_bookmark(user_id: int, task_id: str) -> str:
    if task_id in get_all_booked_task_id():
        return "–¢–∞–∫–∞—è –∑–∞–∫–ª–∞–¥–∫–∞ —É–∂–µ –µ—Å—Ç—å. –û—Ç–º–µ–Ω–∞"
    else:
        add_bookmark_into_db(task_id)
        bookmark_id = get_bookmark_id(task_id)
        add_bookmark_to_user(user_id, bookmark_id)
        return "–ó–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"

    
def get_month_stat():
    show_gist()


def select_task(user_id: int, task_ws_id) -> str:
    change_selected_task(user_id, task_ws_id)
    return '\n'.join(['–í—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞:', get_task_name(task_ws_id)])


if __name__ == '__main__':
    pass
    # get_project_list(TUser(300617281))
