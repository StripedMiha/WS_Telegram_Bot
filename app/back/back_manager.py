import logging
from pprint import pprint
from typing import Union

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from sqlalchemy.exc import NoResultFound

from app.create_log import setup_logger
from app.db.structure_of_db import User, Comment, Bookmark, Task, Project, Status

back_logger: logging.Logger = setup_logger("App.back.manager", "app/log/b_manager.log")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
callback_manager = CallbackData("fab_menu", "action")
callback_manager_select = CallbackData("button_text", "project_id", "action")
callback_manager_decision = CallbackData("button_text", "project_id", "user_id", "action")


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
def get_keyboard(list_data: list[tuple], width: int = 3, enable_cancel: bool = True) -> InlineKeyboardMarkup:
    buttons = []
    for name, action in list_data:
        buttons.append(InlineKeyboardButton(text=name, callback_data=callback_manager.new(action=action)))
    if enable_cancel:
        buttons.append(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=callback_manager.new(action="cancel")))
    keyboard = InlineKeyboardMarkup(row_width=width)
    keyboard.add(*buttons)
    return keyboard


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
def get_keyboard_1(list_data: list[tuple], width: int = 3, enable_cancel: bool = True) -> InlineKeyboardMarkup:
    buttons = []
    for name, data_id, action in list_data:
        buttons.append(InlineKeyboardButton(text=name,
                                            callback_data=callback_manager_select.new(action=action,
                                                                                      project_id=data_id)))
    if enable_cancel:
        buttons.append(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
                                            callback_data=callback_manager_select.new(action="cancel",
                                                                                      project_id='---')))
    keyboard = InlineKeyboardMarkup(row_width=width)
    keyboard.add(*buttons)
    return keyboard


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
def get_keyboard_2(list_data: list[tuple], width: int = 3, enable_cancel: bool = True) -> InlineKeyboardMarkup:
    buttons = []
    for name, project_id, user_id, action in list_data:
        buttons.append(InlineKeyboardButton(text=name,
                                            callback_data=callback_manager_decision.new(action=action,
                                                                                        project_id=project_id,
                                                                                        user_id=user_id)))
    if enable_cancel:
        buttons.append(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
                                            callback_data=callback_manager_decision.new(action="cancel",
                                                                                        project_id='---',
                                                                                        user_id='---')))
    keyboard = InlineKeyboardMarkup(row_width=width)
    keyboard.add(*buttons)
    return keyboard


async def get_manager_help() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    :return:
    """
    text = [f"/manager_menu - –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            f"<b>–°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫:</b>"]
    return "\n".join(text)


async def get_manager_menu() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    :return: InlineKeyboardMarkup
    """
    buttons = [
        ("–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç", "add_to_project"),
        ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "manage_project"),
        ("–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É", "report_project"),
        ("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "create_project"),
        ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ", "project_list")
    ]
    return get_keyboard(buttons, 1)


TARGET_QUERY: dict = {"staff": "add_staff_on_project",
                      "edit": "edit_project"}


async def get_managers_project(user: User, purpose: str, project_status: str = "active") -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–æ–≤, —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º :param project_status:, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.
    action –∑–∞—à–∏—Ç—ã–π –≤ –∫–Ω–æ–ø–∫—É –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è :param purpose: –ø–æ –∫–ª—é—á—É.
    :param user: —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    :param purpose: –¶–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞, –ø–æ –∫–ª—é—á—É –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è action, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞—à–∏—Ç –≤ –∫–Ω–æ–ø–∫—É.
    :param project_status: –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–æ–≤.
    :return: –≠–∫–∑–µ–º–ø–ª—è—Ä InlineKeyboardMarkup –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    projects: list[Project] = [project for project in user.projects if project.project_status == project_status]
    for_keyboard: list[tuple] = [(project.project_name, project.project_id, TARGET_QUERY.get(purpose)) for project in projects]
    return get_keyboard_1(for_keyboard, width=2)


async def get_types_staff(user: User, project: Project) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    :param user:
    :param project:
    :return:
    """
    type_staff: list[tuple[str, str]] = [("–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", "get_constructor"), ("–î–∏–∑–∞–π–Ω–µ—Ä", "get_designer"),
                                         ("–≠–ª–µ–∫—Ç—Ä–æ–Ω—â–∏–∫", "get_electronic"), ("–ú–µ–Ω–µ–¥–∂–µ—Ä", "get_manager"),
                                         ("Saint", "get_graphics")]
    buttons: list[InlineKeyboardButton] = []
    for ru, action in type_staff:
        buttons.append(InlineKeyboardButton(text=ru,
                                            callback_data=callback_manager_decision.new(action=action,
                                                                                        project_id=project.project_id,
                                                                                        user_id=user.user_id)))
    buttons.append(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞",
                                        callback_data=callback_manager.new(action="add_to_project")))
    buttons.append(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
                                        callback_data=callback_manager.new(action="cancel")))
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


async def get_users_list_by_type_staff(project: Project, type_staff: str) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –∏—Ö —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ.
    :param project:
    :param type_staff:
    :return:
    """
    selected_users: list[User] = [user for user in Status.get_users(type_staff)
                                  if Status.get_status("user") in user.statuses]
    selected_users.sort(key=lambda i: i.last_name)
    buttons: list[InlineKeyboardButton] = []
    for user in selected_users:
        bell = "üîî" if user.telegram_id else "üîï"
        if user in project.users:
            text = f"‚úÖ {user.full_name()} {bell}"
        else:
            text = f"‚ùå {user.full_name()} {bell}"
        buttons.append(InlineKeyboardButton(text=text,
                                            callback_data=callback_manager_decision.new(action=f"change_{type_staff}",
                                                                                        project_id=project.project_id,
                                                                                        user_id=user.user_id)))
    buttons.append(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞",
                                        callback_data=callback_manager_select.new(action="add_staff_on_project",
                                                                                  project_id=project.project_id)))
    buttons.append(InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
                                        callback_data=callback_manager.new(action="complete_adding")))
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


async def change_user_status_in_project(user: User, project: Project) -> str:
    """
    –ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–µ.
    :param user:
    :param project:
    :return:
    """
    if project in user.projects:
        user.remove_project(project)
        text: str = f"–í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ {project.project_name}"
    else:
        user.add_project(project)
        text: str = f"–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç {project.project_name}"
    return text


async def finish_creating_project(manager: User, project_name: str, project_description: str) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    :param manager: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ User –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å–≤–µ–∂–µ—Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    :param project_name: –∏–º—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    :param project_description: –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    :return:
    """
    new_project: Project = Project.new_project(project_name, project_description)
    manager.add_project(new_project)
    text = f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.\n" \
           f"–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞: {new_project.project_name}\n" \
           f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {new_project.project_description}" \
           f"–ü—Ä–æ–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    return text


async def get_keyboard_of_settings(project: Project) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    :param project: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Projects
    :return:
    """
    buttons = [
        ("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", project.project_id, "change_project_name"),  # TODO
        ("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", project.project_id, "change_project_description"),  # TODO
        ("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤", project.project_id, "archive_project"),
    ]
    keyboard: InlineKeyboardMarkup = get_keyboard_1(buttons, 1)
    return keyboard


async def archiving_project(project: Project) -> str:
    project.archive_project()
    return f"–ü—Ä–æ–µ–∫—Ç {project.project_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤."


async def get_report() -> str:
    text = f"–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—Ç—ë—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–æ—Ç –î–∞–Ω–∏–∏–ª–∞ –ó–∞—Ç–µ—Ä—é–∫–∏–Ω–∞\n" \
           f"@SMDEmanage_bot –≤–æ—Ç –æ–Ω."
    return text

