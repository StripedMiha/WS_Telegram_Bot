import logging
import re
from typing import List, Optional

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData

from app.back.user_back import get_number_max_page, get_next_prev_page_number
from app.create_log import setup_logger
from app.db.structure_of_db import User, Task, Project, Status

back_logger: logging.Logger = setup_logger("App.back.manager", "app/log/b_manager.log")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
callback_manager = CallbackData("fab_menu", "action")
callback_manager_select = CallbackData("button_text", "action", "project_id")
callback_manager_decision = CallbackData("button_text", "action", "project_id", "user_id")

PROJECT_NAME_TEMPLATE = r"^[a-z,A-Z]{3,5}-\d{3}[a-z,-]?\d?\d?"


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
def get_keyboard(list_data: list[tuple], width: int = 3, enable_cancel: bool = True) -> InlineKeyboardMarkup:
    buttons = []
    for name, action in list_data:
        buttons.append(InlineKeyboardButton(text=name, callback_data=callback_manager.new(action=action)))
    if enable_cancel:
        buttons.append(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=callback_manager.new(action="cancel")))
    keyboard = InlineKeyboardMarkup(row_width=width)
    keyboard.add(*buttons)
    return keyboard


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
def get_keyboard_1(list_data: list[tuple], width: int = 3, enable_cancel: bool = True) -> InlineKeyboardMarkup:
    buttons = []
    for name, action, data_id in list_data:
        buttons.append(InlineKeyboardButton(text=name,
                                            callback_data=callback_manager_select.new(action=action,
                                                                                      project_id=data_id)))
    if enable_cancel:
        buttons.append(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
                                            callback_data=callback_manager_select.new(action="cancel",
                                                                                      project_id='---')))
    keyboard = InlineKeyboardMarkup(row_width=width)
    keyboard.add(*buttons)
    return keyboard


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
def get_keyboard_2(list_data: list[tuple], width: int = 3, enable_cancel: bool = True) -> InlineKeyboardMarkup:
    buttons = []
    for name, action, project_id, user_id in list_data:
        buttons.append(InlineKeyboardButton(text=name,
                                            callback_data=callback_manager_decision.new(action=action,
                                                                                        project_id=project_id,
                                                                                        user_id=user_id)))
    if enable_cancel:
        buttons.append(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
                                            callback_data=callback_manager_decision.new(action="cancel",
                                                                                        project_id='---',
                                                                                        user_id='---')))
    keyboard = InlineKeyboardMarkup(row_width=width)
    keyboard.add(*buttons)
    return keyboard


async def get_manager_help() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    :return:
    """
    text = [f"/manager_menu - –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
            f"<b>–°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫:</b>"]
    return "\n".join(text)


async def get_manager_menu() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    :return: InlineKeyboardMarkup
    """
    buttons = [
        ("–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç", "add_to_project", "0_1"),
        ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "manage_project", "0_1"),
        ("–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É", "report_project", "0_1"),
        ("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "create_project", "0_1"),
        ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ", "project_list", "0_1"),
    ]
    return get_keyboard_1(buttons, 1)


TARGET_QUERY: dict = {"add_to_project": "add_staff_on_project",
                      "manage_project": "edit_project"}

BACK_QUERY: dict = {"add_to_project": "add_to_project",
                    "manage_project": "manage_project"}


async def get_project_pages_data_for_keyboard(max_page: int, page: int, hide_archive: int,
                                              action: str) -> Optional[list[tuple]]:
    """
    –ü–æ–ª—É—á–∞–µ–º –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    :param action:
    :param max_page: –ù–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    :param hide_archive: –°—Ç–∞—Ç—É—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
    :return:
    """
    if max_page > page or (max_page == page and max_page > 0):
        prev_page, next_page = await get_next_prev_page_number(page, max_page)
        page_buttons: list[tuple] = [("‚¨Ö", action, f"{prev_page}_{hide_archive}"),
                                     ("‚û°", action, f"{next_page}_{hide_archive}")]
    else:
        page_buttons: None = None
    return page_buttons


async def get_status_button(hide_status: int, action: str) -> tuple:
    if hide_status:
        status_button: tuple = ("üì¶–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ", action, f"0_0")
    else:
        status_button: tuple = ("üì¶–°–∫—Ä—ã—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ", action, f"0_1")
    return status_button


async def get_managers_project(user: User, purpose: str,
                               data: str) -> (InlineKeyboardMarkup, str, str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–æ–≤, —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º,
    –∫ –∫–æ—Ç–æ—Ä—ã–º —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.action –∑–∞—à–∏—Ç—ã–π –≤ –∫–Ω–æ–ø–∫—É –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –∫–ª—é—á—É.
    :param user: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    :param purpose: –¶–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞, –ø–æ –∫–ª—é—á—É –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è action, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞—à–∏—Ç –≤ –∫–Ω–æ–ø–∫—É.
    :param data: –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
    :return: –≠–∫–∑–µ–º–ø–ª—è—Ä InlineKeyboardMarkup –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    page: int
    hide_status: int
    page, hide_status = [int(i) for i in data.split("_")]

    projects: list[Project] = [project for project in user.projects
                               if project.project_status == "active"]

    projects_button: list[tuple] = [(str(project),
                                     TARGET_QUERY.get(purpose),
                                     project.project_id)
                                    for project in projects]

    if not hide_status:
        archive_projects: list[Project] = [project for project in user.projects
                                           if project.project_status == "archive"]
        for one in archive_projects:
            projects_button.append(("üì¶ " + str(one), TARGET_QUERY.get(purpose), one.project_id))

    if len(projects_button) % 2 != 0:
        projects_button.append(("  ", "empty_button", "---"))

    button_on_page: int = 20
    max_page: int = await get_number_max_page(len(projects_button), button_on_page)

    log: str = f"{user.full_name()} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ "
    text: str = ""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
    page_buttons: Optional[list[tuple]] = await get_project_pages_data_for_keyboard(max_page, page, hide_status,
                                                                                    purpose)

    if page_buttons is not None:
        text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{max_page + 1} "
        log += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{max_page + 1} "

    split_projects: list[tuple] = projects_button[page * button_on_page: button_on_page + (page * button_on_page)]

    if page_buttons is not None:
        for but in page_buttons:
            split_projects.append(but)

    status_button: tuple = await get_status_button(hide_status, BACK_QUERY.get(purpose))
    split_projects.append(status_button)
    if status_button[-1].split("_")[-1] == '1':
        text += "–≤–∫–ª—é—á–∞—è –∞—Ä—Ö–∏–≤–Ω—ã–µ"
        log += "–≤–∫–ª—é—á–∞—è –∞—Ä—Ö–∏–≤–Ω—ã–µ"

    return get_keyboard_1(split_projects, width=2), text, log


async def get_types_staff(user: User, project: Project) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    :param user:
    :param project:
    :return:
    """
    type_staff: list[tuple[str, str]] = [("–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", "get_constructor"), ("–î–∏–∑–∞–π–Ω–µ—Ä", "get_designer"),
                                         ("–≠–ª–µ–∫—Ç—Ä–æ–Ω—â–∏–∫", "get_electronic"), ("–ú–µ–Ω–µ–¥–∂–µ—Ä", "get_manager"),
                                         ("Saint", "get_graphics")]
    buttons: list[InlineKeyboardButton] = []
    for ru, action in type_staff:
        buttons.append(InlineKeyboardButton(text=ru,
                                            callback_data=callback_manager_decision.new(action=action,
                                                                                        project_id=project.project_id,
                                                                                        user_id=user.user_id)))
    buttons.append(InlineKeyboardButton(text="‚Ü© –í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞",
                                        callback_data=callback_manager_select.new(action="add_to_project",
                                                                                  project_id="0_1")))
    buttons.append(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
                                        callback_data=callback_manager.new(action="cancel")))
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


async def get_users_list_by_type_staff(project: Project, type_staff: str) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –∏—Ö —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ.
    :param project:
    :param type_staff:
    :return:
    """
    selected_users: list[User] = [user for user in Status.get_users(type_staff)
                                  if Status.get_status("user") in user.statuses]
    selected_users.sort(key=lambda i: i.last_name)
    buttons: list[InlineKeyboardButton] = []
    for user in selected_users:
        bell = "üîî" if user.telegram_id else "üîï"
        if user in project.users:
            text = f"‚úÖ {user.full_name()} {bell}"
        else:
            text = f"‚ùå {user.full_name()} {bell}"
        buttons.append(InlineKeyboardButton(text=text,
                                            callback_data=callback_manager_decision.new(action=f"change_{type_staff}",
                                                                                        project_id=project.project_id,
                                                                                        user_id=user.user_id)))
    buttons.append(InlineKeyboardButton(text="‚Ü© –í–µ—Ä–Ω—É—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞",
                                        callback_data=callback_manager_select.new(action="add_staff_on_project",
                                                                                  project_id=project.project_id)))
    buttons.append(InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
                                        callback_data=callback_manager.new(action="complete_adding")))
    keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


async def change_user_status_in_project(user: User, project: Project) -> str:
    """
    –ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–µ.
    :param user:
    :param project:
    :return:
    """
    if project in user.projects:
        user.remove_project(project)
        text: str = f"–í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ {str(project)}"
    else:
        user.add_project(project)
        text: str = f"–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç {str(project)}"
    return text


async def finish_creating_project(manager: User,
                                  project_label: str,
                                  project_name: str,
                                  project_description: str) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    :param manager: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ User –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    :param project_name: –∏–º—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    :param project_description: –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    :return:
    """
    new_project: Project = Project.new_project(project_label, project_name, project_description)  # TODO
    manager.add_project(new_project)
    text = f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.\n" \
           f"–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {new_project.project_label}\n" \
           f"–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞: {new_project.project_name}\n" \
           f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {new_project.project_description}\n" \
           f"–ü—Ä–æ–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    return text


async def get_keyboard_of_settings(project: Project) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    :param project: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Projects
    :return:
    """
    buttons = [
        ("–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ", "change_project_label", project.project_id),
        ("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è", "change_project_name", project.project_id),  # TODO
        ("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "change_project_description", project.project_id),  # TODO
        ("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤", "archive_project", project.project_id),
    ]
    keyboard: InlineKeyboardMarkup = get_keyboard_1(buttons, 1)
    return keyboard


async def archiving_project(project: Project) -> tuple[str, bool]:
    """
    –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
    :param project:
    :return:
    """
    if project.project_status == "active":
        project.archive_project()
        answer: str = f"–ü—Ä–æ–µ–∫—Ç '{str(project)}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤."
        mailing_status: bool = True
    else:
        answer: str = f"–ü—Ä–æ–µ–∫—Ç '{str(project)}' –∏—Ç–∞–∫ –≤ –∞—Ä—Ö–∏–≤–µ."
        mailing_status: bool = False
    return answer, mailing_status


async def reactivate_project_keyboard(user: User, task: Task) -> tuple[str, InlineKeyboardMarkup]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    :param user:
    :param task:
    :return:
    """
    text: str = f"{user.full_name()} –≤–Ω—ë—Å —Ç—Ä—É–¥–æ—á–∞—Å—ã –≤ –∑–∞–¥–∞—á—É {task.task_name} –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ " \
                f"{str(task.project)}. \n" \
                f"–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –±—ã–ª–æ –ø—Ä–æ—â–µ –µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –≤–Ω–æ—Å–∏—Ç—å —á–∞—Å—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º?"
    buttons: List[tuple] = [("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "reactivate_project", task.project_id),
                            ("–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", "keep_as_is", task.project_id)]
    keyboard: InlineKeyboardMarkup = get_keyboard_1(buttons, 2, False)
    return text, keyboard


async def change_project_description(user: User, project: Project, new_description: str) -> tuple[str, str]:
    """
–ú–µ–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    :param user:
    :param project:
    :param new_description:
    :return:
    """
    project.redescription(new_description)
    to_other: str = f"{user.full_name()} –ø—Ä–æ–µ–∫—Ç—É {str(project)} –≤–≤—ë–ª –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n" \
                    f"{new_description}"
    to_manager: str = f"–î–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {str(project)} –≤—ã –≤–≤–µ–ª–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n" \
                      f"{new_description}"
    return to_other, to_manager


async def change_project_name(user: User, project: Project, new_name: str) -> tuple[str, str]:
    """
    –ú–µ–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    :param user:
    :param project:
    :param new_name:
    :return:
    """
    old_name: str = project.project_name if project.project_name else "–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑–¥–µ–ª–∏—è"
    project.rename(new_name)
    common_text: str = f"–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è '{old_name}' -> '{new_name}'"
    to_other: str = f"{user.full_name()} –∏–∑–º–µ–Ω–∏–ª {common_text}"
    to_manager: str = f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ {common_text}"
    return to_other, to_manager


async def change_project_label(user: User, project: Project, new_label: str) -> tuple[bool, str, str]:
    """
    –ú–µ–Ω—è–µ—Ç –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    :param user:
    :param project:
    :param new_label:
    :return:
    """
    if re.match(PROJECT_NAME_TEMPLATE, new_label):
        old_label: str = str(project)
        project.relabel(new_label)
        to_other: str = f"{user.full_name()} –∏–∑–º–µ–Ω–∏–ª –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ '{old_label}' -> '{new_label}'"
        to_manager: str = f"–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ '{old_label}' -> '{new_label}'"
        status: bool = True
    else:
        to_manager: str = f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
        to_other: str = f"{user.full_name()} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
        status: bool = False
    return status, to_other, to_manager


async def get_report() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ Telegram-–±–æ—Ç–∞ —Å –æ—Ç—á—ë—Ç–∞–º–∏.
    :return:
    """
    text = f"–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–æ—Ç –î–∞–Ω–∏–∏–ª–∞ –ó–∞—Ç–µ—Ä—é–∫–∏–Ω–∞\n" \
           f"@SMDEmanage_bot –≤–æ—Ç –æ–Ω."
    return text
