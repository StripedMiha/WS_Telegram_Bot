import logging
import re
from datetime import datetime, timedelta
from typing import Union, List

from sqlalchemy.exc import NoResultFound

from app.KeyboardDataClass import KeyboardData
from app.api.work_calendar import is_work_day
from app.create_log import setup_logger
from app.db.structure_of_db import User, Comment, Bookmark, Task, Status
from app.exceptions import NotUserTime, EmptyDayCosts, CancelInput, WrongDate, FutureDate
from app.db.db_access import get_user_days_costs, get_the_user_costs_for_period
from app.back.stat import show_month_gist, show_week_gist, get_first_week_day, show_week_report

main_logger: logging.Logger = setup_logger("App.back.main", "app/log/main.log")
back_logger: logging.Logger = setup_logger("App.back", "app/log/back.log")


INPUT_COST_EXAMPLE = """
–î—Ä–æ–±–Ω—É—é –∏ —Ü–µ–ª—É—é —á–∞—Å—Ç—å —á–∞—Å–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å '.', ','
–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ':', —Ç–æ –±—É–¥–µ—Ç –≤–∑—è—Ç–æ —Ç–æ—á–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
–ü—Ä–∏–º–µ—Ä‚Ññ1:
<i>3</i> ! <i>–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–ø—É—Å–∞</i> ! <i>–°–±–æ—Ä–∫–∞ –ø–µ—á–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞</i>

–ü—Ä–∏–º–µ—Ä‚Ññ2:
<i>0.5</i>! <i>–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–ø—É—Å–∞</i>
<i>2.5</i>! <i>–°–±–æ—Ä–∫–∞ –ø–µ—á–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞</i>

–í –ø–µ—Ä–≤–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤ –±–æ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á, 
–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –¥–æ–±–∞–≤–∏—Ç—Å—è –¥–≤–µ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞.

–í–æ –≤—Ç–æ—Ä–æ–º –ø—Ä–∏–º–µ—Ä–µ –¥–æ–±–∞–≤–∏—Ç—Å—è 3 –∑–∞–ø–∏—Å–∏:
–ü–æ–ª—á–∞—Å–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é. –ê –ø–æ –≤—Ç–æ—Ä–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é 2,5 —á–∞—Å–∞ —Ä–∞–∑–¥–µ–ª—è—Ç—Å—è –Ω–∞ –¥–≤–µ –∑–∞–ø–∏—Å–∏: 
–Ω–∞ –∑–∞–ø–∏—Å—å —Å –¥–≤—É–º—è —á–∞—Å–∞–º–∏ –∏ –∑–∞–ø–∏—Å—å —Å –ø–æ–ª—É—á–∞—Å–æ–º.
"""
remind_settings_button: list = [["–í–∫–ª/–≤—ã–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "toggle_notifications"],
                                ["–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "Set_notification_time"]]


def format_time(time: timedelta) -> str:
    hours = time.seconds // 60 // 60
    minutes = time.seconds // 60 % 60
    f_hours: str = ''
    f_minutes: str = ''
    if minutes > 0:
        f_minutes = f'{minutes} –º–∏–Ω—É—Ç'
    if hours >= 0:
        if hours == 1:
            word = '—á–∞—Å'
        elif 2 <= hours <= 4:
            word = '—á–∞—Å–∞'
        elif hours == 0:
            return f_minutes
        else:
            word = '—á–∞—Å–æ–≤'
        f_hours = f'{hours} {word}'
    return ' '.join([f_hours, f_minutes])


def to_ru_today_date(date: str) -> str:
    f_date = '—Å–µ–≥–æ–¥–Ω—è' if date == 'today' else date
    return f_date


def sum_time(times: list[timedelta]) -> timedelta:
    tot_time: timedelta = timedelta()
    for i in times:
        tot_time += i
    return tot_time


def text_count_removed_costs(user_id: int) -> str:
    user = User.get_user_by_telegram_id(user_id)
    count: int = len(get_user_days_costs(user.user_id, user.get_date()))
    if 2 <= count <= 4:
        word = '–∑–∞–ø–∏—Å–∏'
    else:
        word = '–∑–∞–ø–∏—Å–µ–π'
    return f'–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {str(count)} {word}.'


def get_users_of_list(selected_list: str) -> list[KeyboardData]:
    users: list[User] = Status.get_users(selected_list)
    data_for_keyboard: list[KeyboardData] = []
    action_dict: dict = {"user": "blocked_user",
                         "blocked": "known_user",
                         "admin": ''}
    for i in users:
        data_for_keyboard.append(KeyboardData(i.full_name(), i.user_id, action_dict[selected_list]))
    data_for_keyboard.sort(key=lambda i: i.text)
    return data_for_keyboard


async def check_user(telegram_id: int) -> Union[User, list]:
    try:
        user: User = User.get_user_by_telegram_id(telegram_id)
        return user
    except NoResultFound:
        return [("–Ø –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "new_user"),
                ("–ü–æ–ª—å–∑–æ–≤–∞–ª—Å—è WorkSection", "old_user")]


def menu_buttons(user: User) -> list[list[str]]:
    if user.get_email() is None:
        buttons = [['–û–±–æ –º–Ω–µ', 'about me'],
                   ['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—á—Ç—É', 'set email']]
    else:
        buttons = [[f"üìÉ –û—Ç—á—ë—Ç –∑–∞ {user.get_date(True)}", 'daily report'],
                   ['üîç –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É', 'get tasks list'],
                   ['‚ùåüïì –£–¥–∞–ª–∏—Ç—å —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç—å', 'remove time cost'],
                   ['‚ùåüß∑ –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É', 'remove book'],
                   ['üîÑüìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', 'change date'],
                   ['üîÑüìß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É', 'change email'],
                   ['‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π', 'notifications'],
                   ['‚ÑπÔ∏è –û –≤–∞—Å', 'about me'],
                   ['üí¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–æ—Ç–∑—ã–≤', 'offers']]
    return buttons


def get_about_user_info(user: User) -> str:
    answer = [f"–í–∞—à–µ –∏–º—è - {user.full_name()}",
              f"–í–∞—à–∞ –ø–æ—á—Ç–∞ - {user.get_email()}",
              f"–í–∞—à —Å—Ç–∞—Ç—É—Å - {', '.join([status.status_ru_name for status in user.statuses])}",
              f"–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ - {user.get_date(True)}",
              f"–ó–∞–¥–∞—á–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - {user.default_task.full_name() if user.default_task else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}",
              f"–°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - {'–≤–∫–ª—é—á–µ–Ω—ã' if user.notification_status else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}",
              f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - {user.get_notification_time()}"]
    return "\n".join(answer)


def get_text_for_empty_costs(date: str) -> str:
    return f"–í—ã –Ω–µ –≤–Ω–µ—Å–ª–∏ —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç–∏ –∑–∞ {date}.\n" \
           "–ù–µ –Ω–∞–≤–ª–µ–∫–∞–π –Ω–∞ —Å–µ–±—è –≥–Ω–µ–≤ –ö—Å–µ–Ω–∏–∏. \n" \
           "–ë—É–¥—å —É–º–Ω–∏—á–∫–æ–π - –≤–Ω–µ—Å–∏ —á–∞—Å—ã."


async def see_days_costs(user: User, date: str = "0") -> str:
    if date == "0":
        date = user.get_date()
    comments: list[tuple[str, timedelta, str, str, int]] = get_user_days_costs(user.user_id, date)
    answer: str = ''
    if comments is None or len(comments) == 0:
        answer: str = get_text_for_empty_costs(date)
    else:
        total_time: list[timedelta] = []
        prev_proj_name, prev_task_name = comments[0][3], comments[0][2]
        now_proj = ' '.join(["–ü—Ä–æ–µ–∫—Ç:", prev_proj_name])
        now_task = ' '.join(["  –ó–∞–¥–∞—á–∞:", prev_task_name])
        now_row = ' '.join(["    –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:", format_time(comments[0][1]), "–Ω–∞", comments[0][0]])
        answer: str = "\n".join([now_proj, now_task, now_row])
        total_time.append(comments[0][1])
        for comment in comments[1:]:
            cur_proj_name, cur_task_name = comment[3], comment[2]
            cur_time, cur_text = comment[1], comment[0]
            if prev_proj_name == cur_proj_name:
                if prev_task_name == cur_task_name:
                    now_row = ' '.join(['    –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:', format_time(cur_time), '–Ω–∞', cur_text])
                    answer = '\n'.join([answer, now_row])
                else:
                    prev_task_name = cur_task_name
                    now_task = ' '.join(["  –ó–∞–¥–∞—á–∞:", cur_task_name])
                    now_row = ' '.join(['    –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:', format_time(cur_time), '–Ω–∞', cur_text])
                    answer = '\n'.join([answer, now_task, now_row])
            else:
                now_proj = ' '.join(["\n–ü—Ä–æ–µ–∫—Ç:", cur_proj_name])
                now_task = ' '.join(["  –ó–∞–¥–∞—á–∞:", cur_task_name])
                now_row = ' '.join(['    –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:', format_time(cur_time), '–Ω–∞', cur_text])
                answer = '\n'.join([answer, now_proj, now_task, now_row])
                prev_task_name = cur_task_name
                prev_proj_name = cur_proj_name
            total_time.append(cur_time)
        tot_row = f"\n–û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞ {to_ru_today_date(date)}: {format_time(sum_time(total_time))}"
        answer = '\n'.join([answer, tot_row])
    return answer


def days_costs_for_remove(user: User) -> list[KeyboardData]:
    comments = get_user_days_costs(user.user_id, user.get_date())
    list_comments: list[KeyboardData] = []
    for comment in comments:
        name = ' '.join([format_time(comment[1]), comment[0], comment[2]])
        list_comment = KeyboardData(name, comment[4], "remove_cost_ws")
        list_comments.append(list_comment)
    return list_comments


def remove_cost(cost_id: int) -> str:
    comment = Comment.get_comment(cost_id)
    try:
        comment.remove()
        return '–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
    except Exception as e:
        return '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è'


def bookmarks_for_remove(user: User) -> list[KeyboardData]:
    bookmarks = user.bookmarks  # get_bookmarks_user(user)
    list_bookmarks: list[KeyboardData] = []
    for bookmark in bookmarks:
        list_bookmarks.append(KeyboardData(bookmark.bookmark_name, bookmark.bookmark_id, "remove_bookmark"))
    return list_bookmarks


def remove_costs(user: User):
    comments = get_user_days_costs(user.user_id, user.get_date())
    id_comments = [i[-1] for i in comments]
    for i in id_comments:
        yield remove_cost(i)


async def create_task(name: str, data: dict):
    project_id = data.get("project_id")
    task_id = data.get("task_id")
    if task_id:
        project_id = Task.get_task(task_id).project_id
    Task.new_task(name, project_id, task_id)


def get_list_bookmark(user_id: int) -> Union[list[KeyboardData], str]:
    user: User = User.get_user_by_telegram_id(user_id)
    user_list_bookmark: list[KeyboardData] = [KeyboardData(bookmark.bookmark_name, bookmark.task.task_id)
                                              for bookmark in user.bookmarks]
    if len(user_list_bookmark) == 0:
        return '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–ª–∞–¥–æ–∫.\n –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É"'
    for i in user_list_bookmark:
        i.action = "input_here"
    return user_list_bookmark  # TODO –¥–≤–µ –ø–æ–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–¥–∞—é—â–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏


def add_costs(message: str, data: dict) -> str:
    user: User = User.get_user_by_telegram_id(data.get('user_id'))
    date: str = user.get_date()
    email: str = user.get_email()
    task_id: int = data.get('id')
    list_comments: list[list[str, timedelta]] = parse_input_comments(message)
    for comments_text, comments_time in list_comments:
        f_date = datetime.now().strftime("%d.%m.%Y") if date == 'today' else date
        try:
            print(comments_time, date)
            Comment.add_comment_in_db(user.user_id, task_id, comments_time, comments_text, date)
            yield '–£—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–æ'
        except Exception as e:
            yield '–ù–µ –≤–Ω–µ—Å–µ–Ω–æ'


async def reactivate_task_keyboard(task_id: int) -> List[KeyboardData]:
    """
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏
    :param task_id:
    :return:
    """
    buttons: List[KeyboardData] = [KeyboardData("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É", task_id, "reactivate_task"),
                                   KeyboardData("–û—Å—Ç–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", task_id, "keep_completed")]
    return buttons


async def task_fate(user: User, task: Task, action: str) -> tuple[str, str]:
    """
    –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏(–∏–ª–∏ –Ω–µ—Ç) –∑–∞–¥–∞—á–∏
    :param user:
    :param task:
    :param action:
    :return:
    """
    to_user: str = ""
    to_manager: str = ""
    if action == "reactivate_task":
        task.reactivate_task()
        to_user = f"–ó–∞–¥–∞—á–∞ {task.task_name} –≤–Ω–æ–≤—å –∞–∫—Ç–∏–≤–Ω–∞"
        to_manager = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name()} –≤–Ω—ë—Å —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É " \
                     f"{task.task_name} –∏ —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –µ—ë"
    if action == "keep_completed":
        to_user = f"–ó–∞–¥–∞—á–∞ {task.task_name} –æ—Å—Ç–∞–ª–∞—Å—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π"
        to_manager = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name()} –≤–Ω—ë—Å —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É " \
                     f"{task.task_name} –∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –µ—ë"
    return to_user, to_manager


def to_correct_time(time: str) -> timedelta:
    out_time: timedelta
    if ':' in time:
        out_time = timedelta(hours=int(time.split(':')[0]),
                             minutes=int(time.split(':')[1]))
    else:
        time = float(time.replace(',', '.') if ',' in time else time)
        out_time = timedelta(hours=time)
    return out_time


def time_to_comment(comments: list[str], time_d: timedelta):
    max_time_cost = timedelta(hours=2)
    for comment in comments:
        comment_time = time_d / len(comments)
        if comment_time > max_time_cost:
            split_comment_time = comment_time
            while split_comment_time > max_time_cost:
                split_comment_time -= max_time_cost
                yield [comment, max_time_cost]
            yield [comment, split_comment_time]
        else:
            yield [comment, comment_time]


def parse_input_comments(message: str) -> list[list[str, timedelta]]:
    list_rows: list = message.split('\n')
    comment_with_time: list[list[str, timedelta]] = list(list())
    for row in list_rows:
        comments = [i.strip(' ') for i in row.split('!')[1:]]
        if '' in comments:
            comments.remove('')
        time_d = to_correct_time(row.split('!')[0])
        for i in time_to_comment(comments, time_d):
            comment_with_time.append(i)
    for i in comment_with_time:
        i[1] = ':'.join(str(i[1]).split(':')[:2])
    return comment_with_time


def add_bookmark(user_id: int, task_id: int) -> str:
    user: User = User.get_user(user_id)
    if task_id in [bookmark.task.task_id for bookmark in user.bookmarks]:
        return "–¢–∞–∫–∞—è –∑–∞–∫–ª–∞–¥–∫–∞ —É–∂–µ –µ—Å—Ç—å. –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
    else:
        bookmark: Bookmark = Bookmark.get_bookmark(task_id)
        user.add_bookmark(bookmark)
        return "–ó–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"


def get_month_stat():
    show_month_gist()


def get_week_stat():
    show_week_gist()


async def get_week_report_gist(user: User) -> None:
    first_week_day = get_first_week_day()
    show_week_report(user)


def get_text_menu_notification(status: bool) -> str:
    answer: str = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    st = "–°–µ–π—á–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è %s" % ("–≤–∫–ª—é—á–µ–Ω—ã üîî" if status else "–≤—ã–∫–ª—é—á–µ–Ω—ã üîï")
    return "\n".join([answer, st])


async def set_remind(user: User, time: str, message_time: datetime) -> str:
    hours, minutes = time.split(".")
    remind_time: timedelta = timedelta(hours=int(hours), minutes=int(minutes))
    user.set_remind_time(message_time + remind_time)
    return "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤ %s" % user.remind_notification.strftime("%H:%M")


DATE_PATTERN = r'(0[1-9]|[1-2][0-9]|3[0-1])[., :](0[1-9]|1[0-2])[., :](20[2-9][0-9])'


async def change_date(user: User, new_date: str) -> str:
    if any([i == new_date for i in ("–æ—Ç–º–µ–Ω–∞", "cancel")]):
        raise CancelInput
    elif any([i == new_date for i in ("—Å–µ–≥–æ–¥–Ω—è", "today")]):
        user.change_date(new_date)
        return "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"
    elif any([i == new_date for i in ("–≤—á–µ—Ä–∞", "yesterday")]):
        new_date = (datetime.today() - timedelta(days=1)).strftime("%d.%m.%Y")
        user.change_date(new_date)
        return "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞"
    elif re.match(DATE_PATTERN, new_date):
        date = re.match(DATE_PATTERN, new_date)
        format_date = f"{date.group(1)}.{date.group(2)}.{date.group(3)}"
        if datetime(year=int(date.group(3)), month=int(date.group(2)), day=int(date.group(1))) > datetime.now():
            raise FutureDate
        user.change_date(format_date)
        return f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞: {user.get_date(True)}'
    else:
        raise WrongDate


DATE_BUTTONS = ["–í—á–µ—Ä–∞", "–°–µ–≥–æ–¥–Ω—è", "–û—Ç–º–µ–Ω–∞"]


async def fast_date_keyboard(user: User) -> list[str]:
    if user.get_date() == "today":
        return DATE_BUTTONS
    else:
        now = datetime.strptime(user.get_date(), "%d.%m.%Y")
        one = timedelta(days=1)
        ans: list[str] = [(now - one).strftime("%d.%m.%Y"), (now + one).strftime("%d.%m.%Y")] + DATE_BUTTONS
        return ans


def get_rus_weekday(eng_weekday: str) -> str:
    rus_weekday = {
        "Monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "—Å—Ä–µ–¥—É",
        "Thursday": "—á–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ø—è—Ç–Ω–∏—Ü—É",
        "Saturday": "—Å—É–±–±–æ—Ç—É",
        "Sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    return rus_weekday[eng_weekday]


def get_header_for_report(hours: float, date: str) -> str:
    datetime_date = datetime.strptime(date, '%Y-%m-%d')
    date_for_header = " ".join([get_rus_weekday(datetime_date.strftime('%A')), datetime_date.strftime('%d.%m.%Y')])
    date_header = f"–û—Ç—á—ë—Ç –∑–∞ {date_for_header}."
    header: str = ''
    if hours >= 12:
        header: str = "–í—ã –ª–∏–±–æ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü, –ª–∏–±–æ –≥–¥–µ-—Ç–æ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤–æ–≤–∞–ª–∏." \
                      "\n–£ –≤–∞—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤. –≠—Ç–æ –∑–∞–∫–æ–Ω–Ω–æ?"
    elif hours >= 8:
        header: str = "–í—ã –≤—Å—ë –∑–∞–ø–æ–ª–Ω–∏–ª–∏, –≤—ã –º–æ–ª–æ–¥–µ—Ü!"
    elif hours > 0:
        header: str = "–í—ã –Ω–µ–º–Ω–æ–≥–æ –Ω–µ –¥–æ—Ç—è–Ω—É–ª–∏ –¥–æ 8 —á–∞—Å–æ–≤!"
    return "\n".join([date_header, header])


def sum_costs_to_float(costs: list[timedelta]) -> float:
    day_cost_hours: timedelta = timedelta(hours=0)
    for i in costs:
        # hours, minutes = i.split(":")
        day_cost_hours += i
    day_cost_hours: float = day_cost_hours.seconds / 60 / 60 + (day_cost_hours.days * 24)
    return day_cost_hours


def get_work_date_for_report(notification_time) -> str:
    if datetime.strptime(notification_time, "%H:%M").time().hour < 13:
        i = 1
        while not is_work_day(datetime.now() - timedelta(days=i)):
            i += 1
        now_date = (datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d")
    else:
        now_date: str = datetime.now().strftime("%Y-%m-%d")
    return now_date


async def day_report_message(user: User) -> tuple[str, float]:
    now_time: str = datetime.now().strftime("%H:%M")
    # text: str = ' '
    day_cost_hours: float = 0.0
    if user.notification_status:
        notif_time = user.get_notification_time().split(" ")[1]
        if notif_time == now_time:
            now_date: str = get_work_date_for_report(notif_time)
            main_logger.info("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è %s –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" % user.full_name())
            costs: list[timedelta] = get_the_user_costs_for_period(user, now_date)
            day_cost_hours: float = sum_costs_to_float(costs)
            main_logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ %s —á–∞—Å–æ–≤" % (user.full_name(), day_cost_hours))
            text = "\n\n".join([get_header_for_report(day_cost_hours, now_date), await see_days_costs(user, now_date)])
        elif user.get_remind_notification_time() == now_time:
            main_logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü—Ä–∏—Å—ã–ª–∞–µ–º." % user.full_name())
            text = "–í—ã –æ—Ç–ª–æ–∂–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç–∏. –í–æ—Ç –æ–Ω–æ!"
            user.set_remind_time(None)
        else:
            raise NotUserTime
        if day_cost_hours <= 0:
            raise EmptyDayCosts
    else:
        raise NotUserTime  # –ù–µ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    return text, day_cost_hours


if __name__ == '__main__':
    pass
