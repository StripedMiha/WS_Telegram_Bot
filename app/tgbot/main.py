
import logging
import re
from datetime import datetime, timedelta
from pprint import pprint
from typing import Union

from app.KeyboardDataClass import KeyboardData
from app.api.work_calendar import is_work_day
from app.create_log import setup_logger
from app.db.structure_of_db import User, Comment, Bookmark, Task, Project, Status
from app.exceptions import NotUserTime, EmptyDayCosts, CancelInput, WrongDate, FutureDate
from app.db.db_access import get_user_days_costs, check_comments, get_all_user_day_costs, get_the_user_costs_for_period
from app.api.ws_api import get_day_costs_from_ws, remove_cost_ws, get_all_project_for_user, search_tasks, \
    get_task_info, add_cost, get_the_cost_for_check
from app.db.stat import show_month_gist, show_week_gist, get_first_week_day, show_week_report

main_logger: logging.Logger = setup_logger("App.back.main", "app/log/main.log")
back_logger: logging.Logger = setup_logger("App.back", "app/log/back.log")

INPUT_COSTS = """
–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –º–æ–∂–Ω–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ(–Ω–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏).
–í –Ω–∞—á–∞–ª–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, —Å–ª–µ–¥–æ–º —á–µ—Ä–µ–∑ '!' –º–æ–∂–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ –¥–≤—É—Ö —á–∞—Å–æ–≤. –ê–ª–≥–æ—Ä–∏—Ç–º —Å–∞–º —Ä–∞–∑–¥–µ–ª–∏—Ç –ø–æ –¥–≤–∞ —á–∞—Å–∞. –ü—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É '!' –Ω–µ –≤–∞–∂–Ω—ã

–ü—Ä–∏–º–µ—Ä‚Ññ1:\n<i>3</i> ! <i>–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–ø—É—Å–∞</i> ! <i>–°–±–æ—Ä–∫–∞ –ø–µ—á–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞</i>
"""

INPUT_COST_EXAMPLE = """
–î—Ä–æ–±–Ω—É—é –∏ —Ü–µ–ª—É—é —á–∞—Å—Ç—å —á–∞—Å–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å '.', ','
–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ':', —Ç–æ –±—É–¥–µ—Ç –≤–∑—è—Ç–æ —Ç–æ—á–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
–ü—Ä–∏–º–µ—Ä‚Ññ1:
<i>3</i> ! <i>–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–ø—É—Å–∞</i> ! <i>–°–±–æ—Ä–∫–∞ –ø–µ—á–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞</i>

–ü—Ä–∏–º–µ—Ä‚Ññ2:
<i>0.5</i>! <i>–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–ø—É—Å–∞</i>
<i>2.5</i>! <i>–°–±–æ—Ä–∫–∞ –ø–µ—á–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞</i>

–í –ø–µ—Ä–≤–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤ –±–æ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á, 
–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –≤ WS —É–ª–µ—Ç–∏—Ç –¥–≤–µ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞.

–í–æ –≤—Ç–æ—Ä–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤ WS —É–ª–µ—Ç–∏—Ç 3 –∑–∞–ø–∏—Å–∏:
–ü–æ–ª—á–∞—Å–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é. –ê –ø–æ –≤—Ç–æ—Ä–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é 2,5 —á–∞—Å–∞ —Ä–∞–∑–¥–µ–ª—è—Ç—Å—è –Ω–∞ –¥–≤–µ –∑–∞–ø–∏—Å–∏: 
–Ω–∞ –∑–∞–ø–∏—Å—å —Å –¥–≤—É–º—è —á–∞—Å–∞–º–∏ –∏ –∑–∞–ø–∏—Å—å —Å –ø–æ–ª—É—á–∞—Å–æ–º.
"""
remind_settings_button: list = [["–í–∫–ª/–≤—ã–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "toggle_notifications"],
                                ["–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "Set_notification_time"]]


def format_time(time: str) -> str:
    hours = int(time.split(':')[0].strip(' '))
    minutes = int(time.split(':')[1].strip(' '))
    f_hours: str = ''
    f_minutes: str = ''
    if minutes > 0:
        f_minutes = f'{minutes} –º–∏–Ω—É—Ç'
    if hours >= 0:
        if hours == 1:
            word = '—á–∞—Å'
        elif 2 <= hours <= 4:
            word = '—á–∞—Å–∞'
        elif hours == 0:
            return f_minutes
        else:
            word = '—á–∞—Å–æ–≤'
        f_hours = f'{hours} {word}'
    return ' '.join([f_hours, f_minutes])


def to_ru_today_date(date: str) -> str:
    f_date = '—Å–µ–≥–æ–¥–Ω—è' if date == 'today' else date
    return f_date


def sum_time(times: list[str]) -> str:
    tot_time: timedelta = timedelta()
    for i in times:
        tot_time += timedelta(hours=int(i.split(':')[0]), minutes=int(i.split(':')[1]))
    return ':'.join(str(tot_time).split(':')[:2])


def text_count_removed_costs(user_id: int) -> str:
    user = User.get_user_by_telegram_id(user_id)
    count = len(get_user_days_costs(user.user_id, user.get_date()))
    if 2 <= count <= 4:
        word = '–∑–∞–ø–∏—Å–∏'
    else:
        word = '–∑–∞–ø–∏—Å–µ–π'
    return f'–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {str(count)} {word}.'


def get_users_of_list(selected_list: str) -> list[KeyboardData]:
    users: list[User] = Status.get_users(selected_list)
    data_for_keyboard: list[KeyboardData] = []
    action_dict: dict = {"user": "black_user",
                         "black": "known_user",
                         "admin": ''}
    for i in users:
        data_for_keyboard.append(KeyboardData(i.full_name(), i.user_id, action_dict[selected_list]))
    return data_for_keyboard


def menu_buttons(user: User) -> list[list[str]]:
    if user.get_email() is None:
        buttons = [['–û–±–æ –º–Ω–µ', 'about me'],
                   ['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—á—Ç—É', 'set email']]
    else:
        buttons = [[f"üìÉ –û—Ç—á—ë—Ç –∑–∞ {to_ru_today_date(user.get_date())}", 'daily report'],
                   ['üîç –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É', 'get tasks list'],
                   ['‚ùåüïì –£–¥–∞–ª–∏—Ç—å —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç—å', 'remove time cost'],
                   ['‚ùåüß∑ –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É', 'remove book'],
                   ['üîÑüìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', 'change date'],
                   ['üîÑüìß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É', 'change email'],
                   ['‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π', 'notifications'],
                   ['‚ÑπÔ∏è –û –≤–∞—Å', 'about me'],
                   ['üí¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–æ—Ç–∑—ã–≤', 'offers']]
    return buttons


def get_about_user_info(user: User) -> str:
    status = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin() else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    date = to_ru_today_date(user.get_date())
    notif_status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.notification_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    answer = [f"–í–∞—à–µ –∏–º—è - {user.full_name()}",
              f"–í–∞—à–∞ –ø–æ—á—Ç–∞ - {user.get_email()}",
              f"–í–∞—à —Å—Ç–∞—Ç—É—Å - {status}",
              f"–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ - {date}",
              f"–ó–∞–¥–∞—á–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - {user.default_task.full_name()}",
              f"–°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - {notif_status}",
              f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - {user.get_notification_time()}"]
    return "\n".join(answer)


def get_text_for_empty_costs(date: str) -> str:
    return f"–í—ã –Ω–µ –≤–Ω–µ—Å–ª–∏ —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç–∏ –∑–∞ {date}.\n" \
           "–ù–µ –Ω–∞–≤–ª–µ–∫–∞–π –Ω–∞ —Å–µ–±—è –≥–Ω–µ–≤ –ö—Å–µ–Ω–∏–∏. \n" \
           "–ë—É–¥—å —É–º–Ω–∏—á–∫–æ–π - –≤–Ω–µ—Å–∏ —á–∞—Å—ã."


async def see_days_costs(user: User, date: str = "0") -> str:
    if date != "0" and date != user.get_date():
        await update_day_costs(date, True)
    else:
        date = user.get_date()
    comments = get_user_days_costs(user.user_id, date)
    answer: str = ''
    if comments is None or len(comments) == 0:
        answer = get_text_for_empty_costs(date)
    else:
        total_time: list[str] = []
        prev_proj_name, prev_task_name = comments[0][3], comments[0][2]
        now_proj = ' '.join(["–ü—Ä–æ–µ–∫—Ç:", prev_proj_name])
        now_task = ' '.join(["  –ó–∞–¥–∞—á–∞:", prev_task_name])
        now_row = ' '.join(["    –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:", format_time(comments[0][1]), "–Ω–∞", comments[0][0]])
        answer = "\n".join([now_proj, now_task, now_row])
        total_time.append(comments[0][1])
        for comment in comments[1:]:
            cur_proj_name, cur_task_name = comment[3], comment[2]
            cur_time, cur_text = comment[1], comment[0]
            if prev_proj_name == cur_proj_name:
                if prev_task_name == cur_task_name:
                    now_row = ' '.join(['    –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:', format_time(cur_time), '–Ω–∞', cur_text])
                    answer = '\n'.join([answer, now_row])
                else:
                    prev_task_name = cur_task_name
                    now_task = ' '.join(["  –ó–∞–¥–∞—á–∞:", cur_task_name])
                    now_row = ' '.join(['    –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:', format_time(cur_time), '–Ω–∞', cur_text])
                    answer = '\n'.join([answer, now_task, now_row])
            else:
                now_proj = ' '.join(["\n–ü—Ä–æ–µ–∫—Ç:", cur_proj_name])
                now_task = ' '.join(["  –ó–∞–¥–∞—á–∞:", cur_task_name])
                now_row = ' '.join(['    –ü–æ—Ç—Ä–∞—á–µ–Ω–æ:', format_time(cur_time), '–Ω–∞', cur_text])
                answer = '\n'.join([answer, now_proj, now_task, now_row])
                prev_task_name = cur_task_name
                prev_proj_name = cur_proj_name
            total_time.append(cur_time)
        tot_row = f"\n–û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞ {to_ru_today_date(date)}: {format_time(sum_time(total_time))}"
        answer = '\n'.join([answer, tot_row])
    return answer


def days_costs_for_remove(user: User) -> list[KeyboardData]:
    comments = get_user_days_costs(user.user_id, user.get_date())
    list_comments: list[KeyboardData] = []
    for comment in comments:
        name = ' '.join([format_time(comment[1]), comment[0], comment[2]])
        list_comment = KeyboardData(name, comment[4], "remove_cost_ws")
        list_comments.append(list_comment)
    return list_comments


async def update_day_costs(date: str, one_day: bool = False) -> None:
    main_logger.info('start update day cost')
    db = [i[2] for i in await get_all_user_day_costs(date)]
    ws_comments = await get_day_costs_from_ws(date, one_day)
    ws = [int(comment['id']) for comment in ws_comments]
    await check_comments(ws_comments)
    db_for_remove = [Comment.get_comment(i) for i in list(set(db) - set(ws))]
    for comment in db_for_remove:
        comment.remove()
    main_logger.info('end update day cost')


def remove_cost(cost_id: int) -> str:
    comment = Comment.get_comment(cost_id)
    req = remove_cost_ws(comment.task.task_path, comment.comment_id)
    if req.get('status') == 'ok':
        comment.remove()
        return '–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
    else:
        return '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ WorkSection'


def bookmarks_for_remove(user: User) -> list[KeyboardData]:
    bookmarks = user.bookmarks  # get_bookmarks_user(user)
    list_bookmarks: list[KeyboardData] = []
    for bookmark in bookmarks:
        list_bookmarks.append(KeyboardData(bookmark.bookmark_name, bookmark.bookmark_id, "remove_bookmark"))
    return list_bookmarks


def remove_costs(user: User):
    comments = get_user_days_costs(user.user_id, user.get_date())
    id_comments = [i[-1] for i in comments]
    for i in id_comments:
        yield remove_cost(i)


async def get_project_list(user: User) -> list[KeyboardData]:
    projects: list[KeyboardData] = await get_all_project_for_user(user.get_email())
    projects_id: set[int] = Project.get_all_projects_id_from_db()  # get_projects_db()
    for i in projects:
        if i.id not in projects_id:
            Project.new_project(i)
        i.action = "search_task"
    return projects


# def update_task_parent(parent_id: str) -> None:
#     project: Project = Project.get_project(str(parent_id))
#     project_tasks = search_tasks(f'/project/{project.project_id}/')
#     all_db_task_id: set = {task.task_ws_id for task in project.tasks}
#     all_ws_task_id: set = set()
#     for key, value in project_tasks.items():
#         all_ws_task_id.add(key)
#         task: Task = Task.get_task_via_ws_id(key)
#         if key not in all_db_task_id:
#             page = f'/project/{project.project_id}/{key}/'
#             task_info = get_task_info(page)
#             Task.new_task(task_info.get('data'))
#         elif task.parent_id != value.get("parent") or isinstance(task.parent_id, type(None)):
#             task.update(value.get("parent"))
#         if value.get('child') is not None:
#             for sub_key, sub_value in value.get('child').items():
#                 all_ws_task_id.add(sub_key)
#                 sub_task: Task = Task.get_task_via_ws_id(sub_key)
#                 if sub_key not in all_db_task_id:
#                     sub_page = f'/project/{project.project_id}/{key}/{sub_key}/'
#                     subtask_info = get_task_info(sub_page)
#                     Task.new_task(subtask_info.get('data'), key)
#                 elif Task.get_task_via_ws_id(sub_key).parent_id != sub_value.get("parent"):
#                     sub_task.update(sub_value.get("parent"))
#     # –ü–æ–º–µ—Ç–∏—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–º–∏ –≤ –¥–± –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ ws
#     for i in all_db_task_id - all_ws_task_id:
#         Task.get_task_via_ws_id(i).mark_remove()


def get_text_add_costs(task_id: str, user: User) -> str:
    print(task_id)
    task_ws_id = task_id.strip("/").split("/")[-1]
    task = Task.get_task_by_ws_id(task_ws_id)
    date = f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ - {to_ru_today_date(user.get_date())}'
    answer: str = '\n'.join([task.full_name(), date, INPUT_COSTS])
    return answer


def get_tasks(parent_id: str, user_id: int) -> Union[list[KeyboardData], str]:
    user = User.get_user_by_telegram_id(user_id)
    projects_id: set[int] = Project.get_all_projects_id_from_db()
    # if parent_id in projects_id:
        # update_task_parent(parent_id)
    subtasks: list[Task] = Task.get_subtasks(parent_id)

    if len(subtasks) == 0:
        return get_text_add_costs(parent_id, user)
    else:
        child_tasks: list[KeyboardData] = []
        if parent_id not in projects_id:
            task_name = ' '.join([f'üóÇ', Task.get_task_by_ws_id(parent_id).task_name])
            child_tasks += [KeyboardData(task_name, int(parent_id), 'input_here')]
        child_tasks += [KeyboardData(task.task_name, task.task_ws_id, "search_task")
                        for task in subtasks]

        # child_tasks.reverse()
        # task_name = ' '.join([f'üóÇ', Task.get_task_via_ws_id(parent_id).task_name])
        # child_tasks.append(KeyboardData(task_name, int(parent_id), 'input_here'))
        # child_tasks.reverse()
    return child_tasks


def get_list_bookmark(user_id: int) -> Union[list[KeyboardData], str]:
    user: User = User.get_user_by_telegram_id(user_id)
    user_list_bookmark: list[KeyboardData] = [KeyboardData(bookmark.bookmark_name, bookmark.task.task_ws_id)
                                              for bookmark in user.bookmarks]
    # user_list_bookmark: list[KeyboardData] = get_list_user_bookmark(user_id)
    if len(user_list_bookmark) == 0:
        return '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–ª–∞–¥–æ–∫.\n –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É"'
    for i in user_list_bookmark:
        i.action = "search_task"
    return user_list_bookmark  # TODO –¥–≤–µ –ø–æ–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–¥–∞—é—â–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏


def add_costs(message: str, data: dict) -> str:
    user: User = User.get_user_by_telegram_id(data.get('user_id'))
    date: str = user.get_date()
    email: str = user.get_email()
    path: str = data.get('id')
    list_comments: list[list[str, timedelta]] = parse_input_comments(message)
    for comments_text, comments_time in list_comments:
        print(path, email, comments_text, comments_time, date)
        req = add_cost(page=path,
                       user_email=email,
                       comment=comments_text,
                       time=comments_time,
                       date=date)
        status = req.get('status')
        pprint(req)
        if status == 'ok':
            comment_id = req.get('id')
            f_date = datetime.now().strftime("%d.%m.%Y") if date == 'today' else date
            check_data = [comment_id, path, email, comments_text, comments_time, f_date]
            check = check_adding(check_data)
            if check:
                task_ws_id: str = data.get('id').strip("/").split("/")[-1]
                task_db_id: int = Task.get_task_by_ws_id(task_ws_id).task_id
                Comment.add_comment_in_db(int(comment_id), user.user_id, task_db_id, comments_time, comments_text, date)
                yield '–£—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–æ'
            else:
                yield '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—Å–µ–Ω–∏—è'
        else:
            yield '–ù–µ –≤–Ω–µ—Å–µ–Ω–æ'


def check_adding(data: list):
    comment_id, path, email, comment_text, comment_time, date = data
    req: dict = get_the_cost_for_check(date, path)
    if req.get("status") == "ok":
        costs = req.get("data")
        the_cost = {}
        for cost in costs:
            if int(cost.get("id")) == comment_id:
                the_cost = cost
                break
        if the_cost.get("comment") != comment_text \
                or the_cost.get("task").get("page") != path \
                or the_cost.get("user_from").get("email") != email \
                or the_cost.get("comment") != comment_text \
                or datetime.strptime(the_cost.get("date"), "%Y-%m-%d").strftime("%d.%m.%Y") != date:
            return False
        return True
    return False


def to_correct_time(time: str) -> timedelta:
    out_time: timedelta
    if ':' in time:
        out_time = timedelta(hours=int(time.split(':')[0]),
                             minutes=int(time.split(':')[1]))
    else:
        time = float(time.replace(',', '.') if ',' in time else time)
        out_time = timedelta(hours=time)
    return out_time


def time_to_comment(comments: list[str], time_d: timedelta):
    max_time_cost = timedelta(hours=2)
    for comment in comments:
        comment_time = time_d / len(comments)
        if comment_time > max_time_cost:
            split_comment_time = comment_time
            while split_comment_time > max_time_cost:
                split_comment_time -= max_time_cost
                yield [comment, max_time_cost]
            yield [comment, split_comment_time]
        else:
            yield [comment, comment_time]


def parse_input_comments(message: str) -> list[list[str, timedelta]]:
    list_rows: list = message.split('\n')
    comment_with_time: list[list[str, timedelta]] = list(list())
    for row in list_rows:
        comments = [i.strip(' ') for i in row.split('!')[1:]]
        if '' in comments:
            comments.remove('')
        time_d = to_correct_time(row.split('!')[0])
        for i in time_to_comment(comments, time_d):
            comment_with_time.append(i)
    for i in comment_with_time:
        i[1] = ':'.join(str(i[1]).split(':')[:2])
    return comment_with_time


def add_bookmark(user_id: int, task_id: str) -> str:
    user: User = User.get_user_by_telegram_id(user_id)
    if task_id in [bookmark.task.task_ws_id for bookmark in user.bookmarks]:
        return "–¢–∞–∫–∞—è –∑–∞–∫–ª–∞–¥–∫–∞ —É–∂–µ –µ—Å—Ç—å. –û—Ç–º–µ–Ω–∞"
    else:
        bookmark: Bookmark = Bookmark.get_bookmark(int(task_id))
        user.add_bookmark(bookmark)
        return "–ó–∞–∫–ª–∞–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"


def get_month_stat():
    show_month_gist()


def get_week_stat():
    show_week_gist()


async def get_week_report_gist(user: User):
    first_week_day = get_first_week_day()
    await update_day_costs(first_week_day)
    show_week_report(user)


def get_text_menu_notification(status: bool) -> str:
    answer: str = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    st = "–°–µ–π—á–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è %s" % ("–≤–∫–ª—é—á–µ–Ω—ã üîî" if status else "–≤—ã–∫–ª—é—á–µ–Ω—ã üîï")
    return "\n".join([answer, st])


async def set_remind(user: User, time: str, message_time: datetime) -> str:
    hours, minutes = time.split(".")
    remind_time: timedelta = timedelta(hours=int(hours), minutes=int(minutes))
    user.set_remind_time(message_time + remind_time)
    return "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤ %s" % user.remind_notification.strftime("%H:%M")


DATE_PATTERN = r'(0[1-9]|[1-2][0-9]|3[0-1])[., :](0[1-9]|1[0-2])[., :](20[2-9][0-9])'


async def change_date(user: User, new_date: str) -> str:
    if any([i == new_date for i in ("–æ—Ç–º–µ–Ω–∞", "cancel")]) :
        raise CancelInput
    elif any([i == new_date for i in ("—Å–µ–≥–æ–¥–Ω—è", "today")]):
        user.change_date(new_date)
        return "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"
    elif any([i == new_date for i in ("–≤—á–µ—Ä–∞", "yesterday")]):
        new_date = (datetime.today() - timedelta(days=1)).strftime("%d.%m.%Y")
        user.change_date(new_date)
        return "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞"
    elif re.match(DATE_PATTERN, new_date):
        date = re.match(DATE_PATTERN, new_date)
        format_date = f"{date.group(1)}.{date.group(2)}.{date.group(3)}"
        if datetime(year=int(date.group(3)), month=int(date.group(2)), day=int(date.group(1))) > datetime.now():
            raise FutureDate
        user.change_date(format_date)
        return f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞: {user.get_date()}'
    else:
        raise WrongDate


DATE_BUTTONS = ["–í—á–µ—Ä–∞", "–°–µ–≥–æ–¥–Ω—è", "–û—Ç–º–µ–Ω–∞"]


async def fast_date_keyboard(user: User) -> list[str]:
    if user.get_date() == "today":
        return DATE_BUTTONS
    else:
        now = datetime.strptime(user.get_date(), "%d.%m.%Y")
        one = timedelta(days=1)
        ans: list[str] = [(now - one).strftime("%d.%m.%Y"), (now + one).strftime("%d.%m.%Y")] + DATE_BUTTONS
        return ans


def get_rus_weekday(eng_weekday: str) -> str:
    rus_weekday = {
        "Monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "—Å—Ä–µ–¥—É",
        "Thursday": "—á–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ø—è—Ç–Ω–∏—Ü—É",
        "Saturday": "—Å—É–±–±–æ—Ç—É",
        "Sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    return rus_weekday[eng_weekday]


def get_header_for_report(hours: float, date: str) -> str:
    datetime_date = datetime.strptime(date, '%Y-%m-%d')
    date_for_header = " ".join([get_rus_weekday(datetime_date.strftime('%A')), datetime_date.strftime('%d.%m.%Y')])
    date_header = f"–û—Ç—á—ë—Ç –∑–∞ {date_for_header}."
    header: str = ''
    if hours >= 12:
        header: str = "–í—ã –ª–∏–±–æ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü, –ª–∏–±–æ –≥–¥–µ-—Ç–æ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤–æ–≤–∞–ª–∏." \
                      "\n–£ –≤–∞—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤. –≠—Ç–æ –∑–∞–∫–æ–Ω–Ω–æ?"
    elif hours >= 8:
        header: str = "–í—ã –≤—Å—ë –∑–∞–ø–æ–ª–Ω–∏–ª–∏, –≤—ã –º–æ–ª–æ–¥–µ—Ü!"
    elif hours > 0:
        header: str = "–í—ã –Ω–µ–º–Ω–æ–≥–æ –Ω–µ –¥–æ—Ç—è–Ω—É–ª–∏ –¥–æ 8 —á–∞—Å–æ–≤!"
    return "\n".join([date_header, header])


def sum_costs_to_float(costs: list[str]) -> float:
    day_cost_hours: timedelta = timedelta(hours=0)
    for i in costs:
        hours, minutes = i.split(":")
        day_cost_hours += timedelta(hours=int(hours), minutes=int(minutes))
    day_cost_hours: float = day_cost_hours.seconds / 60 / 60 + (day_cost_hours.days * 24)
    return day_cost_hours


def get_work_date_for_report(notification_time) -> str:
    if datetime.strptime(notification_time, "%H:%M").time().hour < 13:
        i = 1
        while not is_work_day(datetime.now() - timedelta(days=i)):
            i += 1
        now_date = (datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d")
    else:
        now_date: str = datetime.now().strftime("%Y-%m-%d")
    return now_date


async def day_report_message(user: User) -> tuple[str, float]:
    now_time: str = datetime.now().strftime("%H:%M")
    # text: str = ' '
    day_cost_hours: float = 0.0
    if user.notification_status:
        notif_time = user.get_notification_time().split(" ")[1]
        if notif_time == now_time:
            now_date: str = get_work_date_for_report(notif_time)
            main_logger.info("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è %s –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" % user.full_name())
            costs: list = get_the_user_costs_for_period(user, now_date)
            day_cost_hours: float = sum_costs_to_float(costs)
            main_logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ %s —á–∞—Å–æ–≤" % (user.full_name(), day_cost_hours))
            text = "\n\n".join([get_header_for_report(day_cost_hours, now_date), await see_days_costs(user, now_date)])
        elif user.get_remind_notification_time() == now_time:
            main_logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü—Ä–∏—Å—ã–ª–∞–µ–º." % user.full_name())
            text = "–í—ã –æ—Ç–ª–æ–∂–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç–∏. –í–æ—Ç –æ–Ω–æ!"
            user.set_remind_time(None)
        else:
            raise NotUserTime
        if day_cost_hours <= 0:
            raise EmptyDayCosts
    else:
        raise NotUserTime # –ù–µ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    return text, day_cost_hours


if __name__ == '__main__':
    pass
