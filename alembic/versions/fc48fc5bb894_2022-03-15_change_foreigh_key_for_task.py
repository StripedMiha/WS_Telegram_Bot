"""change foreigh key for task

Revision ID: fc48fc5bb894
Revises: b444fd4ee703
Create Date: 2022-03-15 14:52:08.242202

"""
from pprint import pprint

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text, update
from sqlalchemy.engine import ResultProxy

from app.db.structure_of_db import session, User

# revision identifiers, used by Alembic.
revision = 'fc48fc5bb894'
down_revision = 'b444fd4ee703'
branch_labels = None
depends_on = None


def upgrade():
    sql = text(r"SELECT users.user_id, tasks.task_path FROM users JOIN tasks ON tasks.task_ws_id = users.selected_task")
    conn = op.get_bind()
    r: ResultProxy = conn.execute(sql)
    default_users_task = [(user_id, task_path) for user_id, task_path in r.fetchall()]
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('users_task_ws_id_fkey', 'users', type_='foreignkey')
    op.drop_constraint('tasks_task_ws_id_unique', 'tasks', type_='unique')
    for user_id, task_path in default_users_task:
        stmt = update(User).where(User.user_id == user_id).values(selected_task=None)
        conn.execute(stmt)
    op.create_unique_constraint(None, 'tasks', ['task_path'])
    op.create_foreign_key(None, 'users', 'tasks', ['selected_task'], ['task_path'])
    # ### end Alembic commands ###
    for user_id, task_path in default_users_task:
        stmt = update(User).where(User.user_id == user_id).values(selected_task=task_path)
        conn.execute(stmt)


def downgrade():
    sql = text(r"SELECT users.user_id, users.selected_task FROM users")
    conn = op.get_bind()
    r: ResultProxy = conn.execute(sql)
    default_users_task = [(user_id, task_path) for user_id, task_path in r.fetchall()]
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("users_selected_task_fkey", 'users', type_='foreignkey')
    op.drop_constraint("tasks_task_path_key", 'tasks', type_='unique')
    for user_id, task_path in default_users_task:
        stmt = update(User).where(User.user_id == user_id).values(selected_task=None)
        conn.execute(stmt)
    op.create_unique_constraint('tasks_task_ws_id_unique', 'tasks', ['task_ws_id'])
    op.create_foreign_key('users_task_ws_id_fkey', 'users', 'tasks', ['selected_task'], ['task_ws_id'])
    # ### end Alembic commands ###
    for user_id, task_path in default_users_task:
        if task_path:
            task_ws_id = task_path.strip("/").split("/")[-1]
            stmt = update(User).where(User.user_id == user_id).values(selected_task=task_ws_id)
            conn.execute(stmt)
