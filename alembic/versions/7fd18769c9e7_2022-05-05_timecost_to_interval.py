"""timecost to interval

Revision ID: 7fd18769c9e7
Revises: 527bf6f90e29
Create Date: 2022-05-05 12:49:11.600746

"""
from datetime import timedelta

from alembic import op
import sqlalchemy as sa
from app.db.structure_of_db import Comment

# revision identifiers, used by Alembic.
revision = '7fd18769c9e7'
down_revision = '527bf6f90e29'
branch_labels = None
depends_on = None

conn = op.get_bind()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    costs_id_stmt = sa.select(Comment.comment_id, Comment.time)
    costs_id = conn.execute(costs_id_stmt).fetchall()

    op.drop_column("comments", "time")
    with op.batch_alter_table("comments") as batch_op:
        batch_op.add_column(sa.Column("time", sa.Interval, nullable=True))

    comments_data: list[dict] = []
    for com_id, com_time in costs_id:
        h, m = [int(i) for i in com_time.split(":")]
        t = timedelta(hours=h, minutes=m)
        comments_data.append({"comment_id": com_id, "time": t})

    for com in comments_data:
        stmt = sa.update(Comment).where(Comment.comment_id == com['comment_id']).values(time=com['time'])
        conn.execute(stmt)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    costs_id_stmt = sa.select(Comment.comment_id, Comment.time)
    costs_id = conn.execute(costs_id_stmt).fetchall()

    op.drop_column("comments", "time")
    with op.batch_alter_table("comments") as batch_op:
        batch_op.add_column(sa.Column("time", sa.String(10), nullable=True))

    comments_data: list[dict] = []
    for com_id, com_time in costs_id:
        com_time: timedelta
        h, m = com_time.seconds // 60 // 60, com_time.seconds // 60 % 60
        str_time: str = f"{str(h).rjust(2, '0')}:{str(m).rjust(2, '0')}"
        comments_data.append({"comment_id": com_id, "time": str_time})

    for com in comments_data:
        stmt = sa.update(Comment).where(Comment.comment_id == com['comment_id']).values(time=com['time'])
        conn.execute(stmt)
    # ### end Alembic commands ###
