"""change_projects_pkey

Revision ID: 49df0b654370
Revises: cda77cd491c8
Create Date: 2022-03-21 12:02:36.246100

"""
from pprint import pprint

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text

from app.db.structure_of_db import session, Task

# revision identifiers, used by Alembic.
revision = '49df0b654370'
down_revision = 'cda77cd491c8'
branch_labels = None
depends_on = None

conn = op.get_bind()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("projects", "project_id", new_column_name="project_ws_id")
    with op.batch_alter_table("projects") as batch_op:
        batch_op.add_column(sa.Column("project_id", sa.Integer(), primary_key=True, autoincrement=True, nullable=False))
    projects_ids_stmt = text(
        r'SELECT projects.project_id, tasks.task_id FROM tasks JOIN projects ON projects.project_ws_id = tasks.project_id')
    projects_ids = conn.execute(projects_ids_stmt).fetchall()

    op.drop_constraint("tasks_project_id_fkey", "tasks", type_="foreignkey")
    op.drop_constraint("projects_pkey", "projects", type_="primary")

    op.drop_column("tasks", "project_id")
    with op.batch_alter_table("tasks") as batch_op:
        batch_op.add_column(sa.Column("project_id", sa.Integer(), nullable=True))

    for project_id, task_id in projects_ids:
        update_stmt = sa.update(Task).where(text(f"tasks.task_id = {task_id}"))\
                                     .values(project_id=project_id)
        conn.execute(update_stmt)
    op.create_primary_key("projects_pkey", "projects", ["project_id"])
    op.create_foreign_key("tasks_project_id_fkey", "tasks", "projects", ["project_id"], ["project_id"])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    projects_ids_stmt = text(
        r'SELECT projects.project_ws_id, tasks.task_id FROM tasks JOIN projects USING(project_id)')
    projects_ids = conn.execute(projects_ids_stmt).fetchall()

    op.drop_constraint("tasks_project_id_fkey", "tasks", type_="foreignkey")
    op.drop_constraint("projects_pkey", "projects", type_="primary")

    op.drop_column("tasks", "project_id")
    op.drop_column("projects", "project_id")
    op.alter_column("projects", "project_ws_id", new_column_name="project_id")

    with op.batch_alter_table("tasks") as batch_op:
        batch_op.add_column(sa.Column("project_id", sa.String(40), nullable=True))

    for project_id, task_id in projects_ids:
        update_stmt = sa.update(Task).where(text(f"tasks.task_id = {task_id}"))\
                                     .values(project_id=project_id)
        conn.execute(update_stmt)

    op.create_primary_key("projects_pkey", "projects", ["project_id"])
    op.create_foreign_key("tasks_project_id_fkey", "tasks", "projects", ["project_id"], ["project_id"])

    # ### end Alembic commands ###
