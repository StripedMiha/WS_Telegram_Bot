"""status normalization

Revision ID: c3a6901de8c7
Revises: 
Create Date: 2022-03-05 09:34:31.613545

"""
from pprint import pprint

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text, Table, Column, Integer, ForeignKey, String, insert, select, update
from sqlalchemy.engine import ResultProxy
from sqlalchemy.ext.declarative import declarative_base
from app.db.structure_of_db import session, User, engine


# revision identifiers, used by Alembic.
revision = 'c3a6901de8c7'
down_revision = None
branch_labels = None
depends_on = None


Base = declarative_base()
# conn = engine.connect()


user_status = Table("user_status", Base.metadata,
                    Column("user_id", Integer(), ForeignKey("users.user_id"), nullable=False),
                    Column("status_id", Integer(), ForeignKey("statuses.status_id"), nullable=False)
                    )


class Status(Base):
    __tablename__ = "statuses"
    # Base.metadata = metadata
    status_id = Column(Integer(), primary_key=True, nullable=False)
    status_name = Column(String(20), nullable=False)


class User_update(User):
    status = Column(Integer(), nullable=False)


def upgrade():
    sql = text(r"SELECT users.user_id, users.status FROM users")
    conn = op.get_bind()
    r: ResultProxy = conn.execute(sql)
    statuses_dict: dict = {
        "admin": 1,
        "user": 2,
        "wait": 3,
        "black": 4
    }
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('statuses',
    sa.Column('status_id', sa.Integer(), nullable=False),
    sa.Column('status_name', sa.String(length=20), nullable=False),
    sa.PrimaryKeyConstraint('status_id')
    )
    op.create_table('user_status',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('status_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['status_id'], ['statuses.status_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], )
    )
    for stat_name, stat_id in statuses_dict.items():
        stmt = insert(Status).values(status_id=stat_id, status_name=stat_name)
        conn.execute(stmt)

    for id, stat in r.fetchall():
        stmt = insert(user_status).values(user_id=id, status_id=statuses_dict[stat])
        conn.execute(stmt)
        if stat == 'admin':
            stmt = insert(user_status).values(user_id=id, status_id=statuses_dict['user'])
            conn.execute(stmt)

    op.drop_column('users', 'status')
    # ### end Alembic commands ###


def downgrade():
    conn = op.get_bind()
    statuses_dict: dict = {
        1: "admin",
        2: "user",
        3: "wait",
        4: "black"
    }
    # ### commands auto generated by Alembic - please adjust! ###
    list_stat: list = conn.execute(select(user_status)).fetchall()
    list_stat.sort(key=lambda i: i[1])
    op.add_column('users', sa.Column('status', sa.String(length=20), autoincrement=False, nullable=True,
                                     default=None))
    already = set()
    for i in range(len(list_stat)):
        id, stat_name = list_stat[i]
        if id not in already:
            stmt = update(User_update).where(User.user_id == id).values(status=statuses_dict[stat_name])
            conn.execute(stmt)
            already.add(id)
    op.drop_table('user_status')
    op.drop_table('statuses')
    # ### end Alembic commands ###
