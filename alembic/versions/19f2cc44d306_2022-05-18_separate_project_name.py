"""separate_project_name

Revision ID: 19f2cc44d306
Revises: 5f0c104ab39a
Create Date: 2022-05-18 09:48:12.843925

"""
import re
from pprint import pprint
from typing import Optional

from alembic import op
import sqlalchemy as sa
from app.db.structure_of_db import session, Project
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '19f2cc44d306'
down_revision = '5f0c104ab39a'
branch_labels = None
depends_on = None

conn = op.get_bind()
PROJECT_NAME_TEMPLATE = r"^[a-z,A-Z]{3,5}-\d{3}[a-z,-]?\d?\d?"


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    projects_stmt = sa.select(Project.project_id, Project.project_name)
    projects: list[tuple[int, str]] = conn.execute(projects_stmt).fetchall()
    new_names: list[tuple[int, Optional[str], str]] = []
    for project_id, project_name in projects:
        result = re.match(PROJECT_NAME_TEMPLATE, project_name)
        if result:
            new_name: str = project_name.removeprefix(result[0]).strip(" ").strip("(").strip(")")
            new_index: str = result[0].lower()
            new_names.append((project_id, new_index, new_name))
        else:
            new_names.append((project_id, None, project_name))
    new_names.sort(key=lambda i: i[1] if i[1] is not None else '')

    op.add_column('projects', sa.Column('project_label', sa.String(length=20), nullable=True))
    op.drop_constraint('projects_project_name_unique', 'projects', type_='unique')
    op.create_unique_constraint('projects_project_label_unique', 'projects', ['project_label'])
    for project_id, project_label, project_name in new_names:
        upd_stmt = sa.update(Project).where(Project.project_id == project_id).values(project_label=project_label,
                                                                                     project_name=project_name)
        conn.execute(upd_stmt)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    projects_stmt = sa.select(Project.project_id, Project.project_label, Project.project_name)
    projects: list[tuple[int, Optional[str], str]] = conn.execute(projects_stmt).fetchall()
    new_names: list[tuple[int, str]] = []
    for project_id, project_label, project_name in projects:
        if project_label is None:
            new_name: str = project_name
        elif project_name:
            new_name: str = f"{project_label} ({project_name})"
        else:
            new_name: str = project_label
        new_names.append((project_id, new_name))

    op.drop_constraint('projects_project_label_unique', 'projects', type_='unique')

    op.drop_column('projects', 'project_label')

    for project_id, project_name in new_names:
        upd_stmt = sa.update(Project).where(Project.project_id == project_id).values(project_name=project_name)
        conn.execute(upd_stmt)
    op.create_unique_constraint('projects_project_name_unique', 'projects', ['project_name'])
    # ### end Alembic commands ###
