"""change user pkey

Revision ID: 8486e7e5b806
Revises: fc48fc5bb894
Create Date: 2022-03-17 17:47:23.645913

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text, update
from app.db.structure_of_db import user_status, user_bookmark, Comment

# revision identifiers, used by Alembic.
revision = '8486e7e5b806'
down_revision = 'fc48fc5bb894'
branch_labels = None
depends_on = None

conn = op.get_bind()


def upgrade():

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('id', sa.Integer(), nullable=False, primary_key=True, autoincrement=True))

    user_statuses_sql = text(
        r'SELECT users.id, user_status.user_id, user_status.status_id FROM user_status JOIN users USING(user_id)')
    user_statuses = conn.execute(user_statuses_sql).fetchall()

    user_bookmarks_sql = text(
        r'SELECT users.id, user_bookmark.user_id, user_bookmark.bookmark_id FROM user_bookmark JOIN users USING(user_id)')
    user_bookmarks = conn.execute(user_bookmarks_sql).fetchall()

    user_comments_sql = text(
        r'SELECT users.id, user_id, comment_id FROM comments JOIN users USING(user_id)')
    user_comments = conn.execute(user_comments_sql).fetchall()

    op.drop_constraint('user_status_user_id_fkey', 'user_status', type_='foreignkey')
    op.drop_constraint('user_bookmark_user_id_fkey', 'user_bookmark', type_='foreignkey')
    op.drop_constraint('comments_user_id_fkey', 'comments', type_='foreignkey')
    op.drop_constraint('users_pkey', 'users', type_='primary')

    for ids, user_id, status_id in user_statuses:
        update_stmt = update(user_status).where(text(f'user_status.user_id = {user_id}')).values(user_id=ids)
        conn.execute(update_stmt)

    for ids, user_id, bookmark_id in user_bookmarks:
        update_stmt = update(user_bookmark).where(text(f'user_bookmark.user_id = {user_id}')).values(user_id=ids)
        conn.execute(update_stmt)

    for ids, user_id, comment_id in user_comments:
        update_stmt = update(Comment).where(Comment.user_id == user_id).values(user_id=ids)
        conn.execute(update_stmt)

    op.alter_column('users', 'user_id', new_column_name='telegram_id')
    op.alter_column('users', 'id', new_column_name='user_id')

    op.create_primary_key('users_pkey', 'users', ['user_id'])
    op.create_foreign_key('comments_user_id_fkey', 'comments', 'users', ['user_id'], ['user_id'])
    op.create_foreign_key('user_bookmark_user_id_fkey', 'user_bookmark', 'users', ['user_id'], ['user_id'])
    op.create_foreign_key('user_status_user_id_fkey', 'user_status', 'users', ['user_id'], ['user_id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    user_statuses_sql = text(
        r'SELECT users.telegram_id, user_status.user_id, user_status.status_id FROM user_status JOIN users USING(user_id)')
    user_statuses = conn.execute(user_statuses_sql).fetchall()

    user_bookmarks_sql = text(
        r'SELECT users.telegram_id, user_bookmark.user_id, user_bookmark.bookmark_id FROM user_bookmark JOIN users USING(user_id)')
    user_bookmarks = conn.execute(user_bookmarks_sql).fetchall()

    user_comments_sql = text(
        r'SELECT users.telegram_id, comments.user_id, comments.comment_id FROM comments JOIN users USING(user_id)')
    user_comments = conn.execute(user_comments_sql).fetchall()

    op.drop_constraint('user_status_user_id_fkey', 'user_status', type_='foreignkey')
    op.drop_constraint('user_bookmark_user_id_fkey', 'user_bookmark', type_='foreignkey')
    op.drop_constraint('comments_user_id_fkey', 'comments', type_='foreignkey')
    op.drop_constraint('users_pkey', 'users', type_='primary')

    for telegram_id, user_id, status_id in user_statuses:
        update_stmt = update(user_status).where(text(f'user_status.user_id = {user_id}')).values(user_id=telegram_id)
        conn.execute(update_stmt)

    for telegram_id, user_id, bookmark_id in user_bookmarks:
        update_stmt = update(user_bookmark).where(text(f'user_bookmark.user_id = {user_id}')).values(user_id=telegram_id)
        conn.execute(update_stmt)

    for telegram_id, user_id, comment_id in user_comments:
        update_stmt = update(Comment).where(Comment.user_id == user_id).values(user_id=telegram_id)
        conn.execute(update_stmt)

    # op.alter_column('users', 'user_id', new_column_name='user_db_id')
    op.drop_column('users', 'user_id')
    op.alter_column('users', 'telegram_id', new_column_name='user_id')

    op.create_primary_key('users_pkey', 'users', ['user_id'])
    op.create_foreign_key('comments_user_id_fkey', 'comments', 'users', ['user_id'], ['user_id'])
    op.create_foreign_key('user_bookmark_user_id_fkey', 'user_bookmark', 'users', ['user_id'], ['user_id'])
    op.create_foreign_key('user_status_user_id_fkey', 'user_status', 'users', ['user_id'], ['user_id'])

    # ### end Alembic commands ###
